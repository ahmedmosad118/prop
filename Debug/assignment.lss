
assignment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000264a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012a  00800060  0000264a  000026be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001a40  00000000  00000000  000027e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000adc  00000000  00000000  00004228  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000180  00000000  00000000  00004d04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001d3  00000000  00000000  00004e84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000200f  00000000  00000000  00005057  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001170  00000000  00000000  00007066  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001001  00000000  00000000  000081d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  000091d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c1  00000000  00000000  00009378  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008ae  00000000  00000000  00009639  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009ee7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 1f 11 	jmp	0x223e	; 0x223e <__vector_1>
       8:	0c 94 fc 11 	jmp	0x23f8	; 0x23f8 <__vector_2>
       c:	0c 94 5f 12 	jmp	0x24be	; 0x24be <__vector_3>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e4       	ldi	r30, 0x4A	; 74
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 1a 10 	call	0x2034	; 0x2034 <main>
      7a:	0c 94 23 13 	jmp	0x2646	; 0x2646 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 bb 12 	jmp	0x2576	; 0x2576 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 d7 12 	jmp	0x25ae	; 0x25ae <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 c7 12 	jmp	0x258e	; 0x258e <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 e3 12 	jmp	0x25c6	; 0x25c6 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 c7 12 	jmp	0x258e	; 0x258e <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 e3 12 	jmp	0x25c6	; 0x25c6 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 bb 12 	jmp	0x2576	; 0x2576 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 d7 12 	jmp	0x25ae	; 0x25ae <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 c7 12 	jmp	0x258e	; 0x258e <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 e3 12 	jmp	0x25c6	; 0x25c6 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 c7 12 	jmp	0x258e	; 0x258e <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 e3 12 	jmp	0x25c6	; 0x25c6 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 c7 12 	jmp	0x258e	; 0x258e <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 e3 12 	jmp	0x25c6	; 0x25c6 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 cb 12 	jmp	0x2596	; 0x2596 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 e7 12 	jmp	0x25ce	; 0x25ce <__epilogue_restores__+0x20>

000007ea <__floatunsisf>:
     7ea:	a8 e0       	ldi	r26, 0x08	; 8
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 c3 12 	jmp	0x2586	; 0x2586 <__prologue_saves__+0x10>
     7f6:	7b 01       	movw	r14, r22
     7f8:	8c 01       	movw	r16, r24
     7fa:	61 15       	cp	r22, r1
     7fc:	71 05       	cpc	r23, r1
     7fe:	81 05       	cpc	r24, r1
     800:	91 05       	cpc	r25, r1
     802:	19 f4       	brne	.+6      	; 0x80a <__floatunsisf+0x20>
     804:	82 e0       	ldi	r24, 0x02	; 2
     806:	89 83       	std	Y+1, r24	; 0x01
     808:	60 c0       	rjmp	.+192    	; 0x8ca <__stack+0x6b>
     80a:	83 e0       	ldi	r24, 0x03	; 3
     80c:	89 83       	std	Y+1, r24	; 0x01
     80e:	8e e1       	ldi	r24, 0x1E	; 30
     810:	c8 2e       	mov	r12, r24
     812:	d1 2c       	mov	r13, r1
     814:	dc 82       	std	Y+4, r13	; 0x04
     816:	cb 82       	std	Y+3, r12	; 0x03
     818:	ed 82       	std	Y+5, r14	; 0x05
     81a:	fe 82       	std	Y+6, r15	; 0x06
     81c:	0f 83       	std	Y+7, r16	; 0x07
     81e:	18 87       	std	Y+8, r17	; 0x08
     820:	c8 01       	movw	r24, r16
     822:	b7 01       	movw	r22, r14
     824:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__clzsi2>
     828:	fc 01       	movw	r30, r24
     82a:	31 97       	sbiw	r30, 0x01	; 1
     82c:	f7 ff       	sbrs	r31, 7
     82e:	3b c0       	rjmp	.+118    	; 0x8a6 <__stack+0x47>
     830:	22 27       	eor	r18, r18
     832:	33 27       	eor	r19, r19
     834:	2e 1b       	sub	r18, r30
     836:	3f 0b       	sbc	r19, r31
     838:	57 01       	movw	r10, r14
     83a:	68 01       	movw	r12, r16
     83c:	02 2e       	mov	r0, r18
     83e:	04 c0       	rjmp	.+8      	; 0x848 <__floatunsisf+0x5e>
     840:	d6 94       	lsr	r13
     842:	c7 94       	ror	r12
     844:	b7 94       	ror	r11
     846:	a7 94       	ror	r10
     848:	0a 94       	dec	r0
     84a:	d2 f7       	brpl	.-12     	; 0x840 <__floatunsisf+0x56>
     84c:	40 e0       	ldi	r20, 0x00	; 0
     84e:	50 e0       	ldi	r21, 0x00	; 0
     850:	60 e0       	ldi	r22, 0x00	; 0
     852:	70 e0       	ldi	r23, 0x00	; 0
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	a0 e0       	ldi	r26, 0x00	; 0
     85a:	b0 e0       	ldi	r27, 0x00	; 0
     85c:	04 c0       	rjmp	.+8      	; 0x866 <__stack+0x7>
     85e:	88 0f       	add	r24, r24
     860:	99 1f       	adc	r25, r25
     862:	aa 1f       	adc	r26, r26
     864:	bb 1f       	adc	r27, r27
     866:	2a 95       	dec	r18
     868:	d2 f7       	brpl	.-12     	; 0x85e <__floatunsisf+0x74>
     86a:	01 97       	sbiw	r24, 0x01	; 1
     86c:	a1 09       	sbc	r26, r1
     86e:	b1 09       	sbc	r27, r1
     870:	8e 21       	and	r24, r14
     872:	9f 21       	and	r25, r15
     874:	a0 23       	and	r26, r16
     876:	b1 23       	and	r27, r17
     878:	00 97       	sbiw	r24, 0x00	; 0
     87a:	a1 05       	cpc	r26, r1
     87c:	b1 05       	cpc	r27, r1
     87e:	21 f0       	breq	.+8      	; 0x888 <__stack+0x29>
     880:	41 e0       	ldi	r20, 0x01	; 1
     882:	50 e0       	ldi	r21, 0x00	; 0
     884:	60 e0       	ldi	r22, 0x00	; 0
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	4a 29       	or	r20, r10
     88a:	5b 29       	or	r21, r11
     88c:	6c 29       	or	r22, r12
     88e:	7d 29       	or	r23, r13
     890:	4d 83       	std	Y+5, r20	; 0x05
     892:	5e 83       	std	Y+6, r21	; 0x06
     894:	6f 83       	std	Y+7, r22	; 0x07
     896:	78 87       	std	Y+8, r23	; 0x08
     898:	8e e1       	ldi	r24, 0x1E	; 30
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	8e 1b       	sub	r24, r30
     89e:	9f 0b       	sbc	r25, r31
     8a0:	9c 83       	std	Y+4, r25	; 0x04
     8a2:	8b 83       	std	Y+3, r24	; 0x03
     8a4:	12 c0       	rjmp	.+36     	; 0x8ca <__stack+0x6b>
     8a6:	30 97       	sbiw	r30, 0x00	; 0
     8a8:	81 f0       	breq	.+32     	; 0x8ca <__stack+0x6b>
     8aa:	0e 2e       	mov	r0, r30
     8ac:	04 c0       	rjmp	.+8      	; 0x8b6 <__stack+0x57>
     8ae:	ee 0c       	add	r14, r14
     8b0:	ff 1c       	adc	r15, r15
     8b2:	00 1f       	adc	r16, r16
     8b4:	11 1f       	adc	r17, r17
     8b6:	0a 94       	dec	r0
     8b8:	d2 f7       	brpl	.-12     	; 0x8ae <__stack+0x4f>
     8ba:	ed 82       	std	Y+5, r14	; 0x05
     8bc:	fe 82       	std	Y+6, r15	; 0x06
     8be:	0f 83       	std	Y+7, r16	; 0x07
     8c0:	18 87       	std	Y+8, r17	; 0x08
     8c2:	ce 1a       	sub	r12, r30
     8c4:	df 0a       	sbc	r13, r31
     8c6:	dc 82       	std	Y+4, r13	; 0x04
     8c8:	cb 82       	std	Y+3, r12	; 0x03
     8ca:	1a 82       	std	Y+2, r1	; 0x02
     8cc:	ce 01       	movw	r24, r28
     8ce:	01 96       	adiw	r24, 0x01	; 1
     8d0:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     8d4:	28 96       	adiw	r28, 0x08	; 8
     8d6:	ea e0       	ldi	r30, 0x0A	; 10
     8d8:	0c 94 df 12 	jmp	0x25be	; 0x25be <__epilogue_restores__+0x10>

000008dc <__clzsi2>:
     8dc:	ef 92       	push	r14
     8de:	ff 92       	push	r15
     8e0:	0f 93       	push	r16
     8e2:	1f 93       	push	r17
     8e4:	7b 01       	movw	r14, r22
     8e6:	8c 01       	movw	r16, r24
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	e8 16       	cp	r14, r24
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	f8 06       	cpc	r15, r24
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	08 07       	cpc	r16, r24
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	18 07       	cpc	r17, r24
     8f8:	88 f4       	brcc	.+34     	; 0x91c <__clzsi2+0x40>
     8fa:	8f ef       	ldi	r24, 0xFF	; 255
     8fc:	e8 16       	cp	r14, r24
     8fe:	f1 04       	cpc	r15, r1
     900:	01 05       	cpc	r16, r1
     902:	11 05       	cpc	r17, r1
     904:	31 f0       	breq	.+12     	; 0x912 <__clzsi2+0x36>
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x36>
     908:	88 e0       	ldi	r24, 0x08	; 8
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	17 c0       	rjmp	.+46     	; 0x940 <__clzsi2+0x64>
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	12 c0       	rjmp	.+36     	; 0x940 <__clzsi2+0x64>
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	e8 16       	cp	r14, r24
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	f8 06       	cpc	r15, r24
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	08 07       	cpc	r16, r24
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	18 07       	cpc	r17, r24
     92c:	28 f0       	brcs	.+10     	; 0x938 <__clzsi2+0x5c>
     92e:	88 e1       	ldi	r24, 0x18	; 24
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	04 c0       	rjmp	.+8      	; 0x940 <__clzsi2+0x64>
     938:	80 e1       	ldi	r24, 0x10	; 16
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	a0 e0       	ldi	r26, 0x00	; 0
     93e:	b0 e0       	ldi	r27, 0x00	; 0
     940:	20 e2       	ldi	r18, 0x20	; 32
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	40 e0       	ldi	r20, 0x00	; 0
     946:	50 e0       	ldi	r21, 0x00	; 0
     948:	28 1b       	sub	r18, r24
     94a:	39 0b       	sbc	r19, r25
     94c:	4a 0b       	sbc	r20, r26
     94e:	5b 0b       	sbc	r21, r27
     950:	04 c0       	rjmp	.+8      	; 0x95a <__clzsi2+0x7e>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	8a 95       	dec	r24
     95c:	d2 f7       	brpl	.-12     	; 0x952 <__clzsi2+0x76>
     95e:	f7 01       	movw	r30, r14
     960:	e8 59       	subi	r30, 0x98	; 152
     962:	ff 4f       	sbci	r31, 0xFF	; 255
     964:	80 81       	ld	r24, Z
     966:	28 1b       	sub	r18, r24
     968:	31 09       	sbc	r19, r1
     96a:	41 09       	sbc	r20, r1
     96c:	51 09       	sbc	r21, r1
     96e:	c9 01       	movw	r24, r18
     970:	1f 91       	pop	r17
     972:	0f 91       	pop	r16
     974:	ff 90       	pop	r15
     976:	ef 90       	pop	r14
     978:	08 95       	ret

0000097a <__pack_f>:
     97a:	df 92       	push	r13
     97c:	ef 92       	push	r14
     97e:	ff 92       	push	r15
     980:	0f 93       	push	r16
     982:	1f 93       	push	r17
     984:	fc 01       	movw	r30, r24
     986:	e4 80       	ldd	r14, Z+4	; 0x04
     988:	f5 80       	ldd	r15, Z+5	; 0x05
     98a:	06 81       	ldd	r16, Z+6	; 0x06
     98c:	17 81       	ldd	r17, Z+7	; 0x07
     98e:	d1 80       	ldd	r13, Z+1	; 0x01
     990:	80 81       	ld	r24, Z
     992:	82 30       	cpi	r24, 0x02	; 2
     994:	48 f4       	brcc	.+18     	; 0x9a8 <__pack_f+0x2e>
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	a0 e1       	ldi	r26, 0x10	; 16
     99c:	b0 e0       	ldi	r27, 0x00	; 0
     99e:	e8 2a       	or	r14, r24
     9a0:	f9 2a       	or	r15, r25
     9a2:	0a 2b       	or	r16, r26
     9a4:	1b 2b       	or	r17, r27
     9a6:	a5 c0       	rjmp	.+330    	; 0xaf2 <__pack_f+0x178>
     9a8:	84 30       	cpi	r24, 0x04	; 4
     9aa:	09 f4       	brne	.+2      	; 0x9ae <__pack_f+0x34>
     9ac:	9f c0       	rjmp	.+318    	; 0xaec <__pack_f+0x172>
     9ae:	82 30       	cpi	r24, 0x02	; 2
     9b0:	21 f4       	brne	.+8      	; 0x9ba <__pack_f+0x40>
     9b2:	ee 24       	eor	r14, r14
     9b4:	ff 24       	eor	r15, r15
     9b6:	87 01       	movw	r16, r14
     9b8:	05 c0       	rjmp	.+10     	; 0x9c4 <__pack_f+0x4a>
     9ba:	e1 14       	cp	r14, r1
     9bc:	f1 04       	cpc	r15, r1
     9be:	01 05       	cpc	r16, r1
     9c0:	11 05       	cpc	r17, r1
     9c2:	19 f4       	brne	.+6      	; 0x9ca <__pack_f+0x50>
     9c4:	e0 e0       	ldi	r30, 0x00	; 0
     9c6:	f0 e0       	ldi	r31, 0x00	; 0
     9c8:	96 c0       	rjmp	.+300    	; 0xaf6 <__pack_f+0x17c>
     9ca:	62 81       	ldd	r22, Z+2	; 0x02
     9cc:	73 81       	ldd	r23, Z+3	; 0x03
     9ce:	9f ef       	ldi	r25, 0xFF	; 255
     9d0:	62 38       	cpi	r22, 0x82	; 130
     9d2:	79 07       	cpc	r23, r25
     9d4:	0c f0       	brlt	.+2      	; 0x9d8 <__pack_f+0x5e>
     9d6:	5b c0       	rjmp	.+182    	; 0xa8e <__pack_f+0x114>
     9d8:	22 e8       	ldi	r18, 0x82	; 130
     9da:	3f ef       	ldi	r19, 0xFF	; 255
     9dc:	26 1b       	sub	r18, r22
     9de:	37 0b       	sbc	r19, r23
     9e0:	2a 31       	cpi	r18, 0x1A	; 26
     9e2:	31 05       	cpc	r19, r1
     9e4:	2c f0       	brlt	.+10     	; 0x9f0 <__pack_f+0x76>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	2a c0       	rjmp	.+84     	; 0xa44 <__pack_f+0xca>
     9f0:	b8 01       	movw	r22, r16
     9f2:	a7 01       	movw	r20, r14
     9f4:	02 2e       	mov	r0, r18
     9f6:	04 c0       	rjmp	.+8      	; 0xa00 <__pack_f+0x86>
     9f8:	76 95       	lsr	r23
     9fa:	67 95       	ror	r22
     9fc:	57 95       	ror	r21
     9fe:	47 95       	ror	r20
     a00:	0a 94       	dec	r0
     a02:	d2 f7       	brpl	.-12     	; 0x9f8 <__pack_f+0x7e>
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	a0 e0       	ldi	r26, 0x00	; 0
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	04 c0       	rjmp	.+8      	; 0xa16 <__pack_f+0x9c>
     a0e:	88 0f       	add	r24, r24
     a10:	99 1f       	adc	r25, r25
     a12:	aa 1f       	adc	r26, r26
     a14:	bb 1f       	adc	r27, r27
     a16:	2a 95       	dec	r18
     a18:	d2 f7       	brpl	.-12     	; 0xa0e <__pack_f+0x94>
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	a1 09       	sbc	r26, r1
     a1e:	b1 09       	sbc	r27, r1
     a20:	8e 21       	and	r24, r14
     a22:	9f 21       	and	r25, r15
     a24:	a0 23       	and	r26, r16
     a26:	b1 23       	and	r27, r17
     a28:	00 97       	sbiw	r24, 0x00	; 0
     a2a:	a1 05       	cpc	r26, r1
     a2c:	b1 05       	cpc	r27, r1
     a2e:	21 f0       	breq	.+8      	; 0xa38 <__pack_f+0xbe>
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	a0 e0       	ldi	r26, 0x00	; 0
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	9a 01       	movw	r18, r20
     a3a:	ab 01       	movw	r20, r22
     a3c:	28 2b       	or	r18, r24
     a3e:	39 2b       	or	r19, r25
     a40:	4a 2b       	or	r20, r26
     a42:	5b 2b       	or	r21, r27
     a44:	da 01       	movw	r26, r20
     a46:	c9 01       	movw	r24, r18
     a48:	8f 77       	andi	r24, 0x7F	; 127
     a4a:	90 70       	andi	r25, 0x00	; 0
     a4c:	a0 70       	andi	r26, 0x00	; 0
     a4e:	b0 70       	andi	r27, 0x00	; 0
     a50:	80 34       	cpi	r24, 0x40	; 64
     a52:	91 05       	cpc	r25, r1
     a54:	a1 05       	cpc	r26, r1
     a56:	b1 05       	cpc	r27, r1
     a58:	39 f4       	brne	.+14     	; 0xa68 <__pack_f+0xee>
     a5a:	27 ff       	sbrs	r18, 7
     a5c:	09 c0       	rjmp	.+18     	; 0xa70 <__pack_f+0xf6>
     a5e:	20 5c       	subi	r18, 0xC0	; 192
     a60:	3f 4f       	sbci	r19, 0xFF	; 255
     a62:	4f 4f       	sbci	r20, 0xFF	; 255
     a64:	5f 4f       	sbci	r21, 0xFF	; 255
     a66:	04 c0       	rjmp	.+8      	; 0xa70 <__pack_f+0xf6>
     a68:	21 5c       	subi	r18, 0xC1	; 193
     a6a:	3f 4f       	sbci	r19, 0xFF	; 255
     a6c:	4f 4f       	sbci	r20, 0xFF	; 255
     a6e:	5f 4f       	sbci	r21, 0xFF	; 255
     a70:	e0 e0       	ldi	r30, 0x00	; 0
     a72:	f0 e0       	ldi	r31, 0x00	; 0
     a74:	20 30       	cpi	r18, 0x00	; 0
     a76:	a0 e0       	ldi	r26, 0x00	; 0
     a78:	3a 07       	cpc	r19, r26
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	4a 07       	cpc	r20, r26
     a7e:	a0 e4       	ldi	r26, 0x40	; 64
     a80:	5a 07       	cpc	r21, r26
     a82:	10 f0       	brcs	.+4      	; 0xa88 <__pack_f+0x10e>
     a84:	e1 e0       	ldi	r30, 0x01	; 1
     a86:	f0 e0       	ldi	r31, 0x00	; 0
     a88:	79 01       	movw	r14, r18
     a8a:	8a 01       	movw	r16, r20
     a8c:	27 c0       	rjmp	.+78     	; 0xadc <__pack_f+0x162>
     a8e:	60 38       	cpi	r22, 0x80	; 128
     a90:	71 05       	cpc	r23, r1
     a92:	64 f5       	brge	.+88     	; 0xaec <__pack_f+0x172>
     a94:	fb 01       	movw	r30, r22
     a96:	e1 58       	subi	r30, 0x81	; 129
     a98:	ff 4f       	sbci	r31, 0xFF	; 255
     a9a:	d8 01       	movw	r26, r16
     a9c:	c7 01       	movw	r24, r14
     a9e:	8f 77       	andi	r24, 0x7F	; 127
     aa0:	90 70       	andi	r25, 0x00	; 0
     aa2:	a0 70       	andi	r26, 0x00	; 0
     aa4:	b0 70       	andi	r27, 0x00	; 0
     aa6:	80 34       	cpi	r24, 0x40	; 64
     aa8:	91 05       	cpc	r25, r1
     aaa:	a1 05       	cpc	r26, r1
     aac:	b1 05       	cpc	r27, r1
     aae:	39 f4       	brne	.+14     	; 0xabe <__pack_f+0x144>
     ab0:	e7 fe       	sbrs	r14, 7
     ab2:	0d c0       	rjmp	.+26     	; 0xace <__pack_f+0x154>
     ab4:	80 e4       	ldi	r24, 0x40	; 64
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	a0 e0       	ldi	r26, 0x00	; 0
     aba:	b0 e0       	ldi	r27, 0x00	; 0
     abc:	04 c0       	rjmp	.+8      	; 0xac6 <__pack_f+0x14c>
     abe:	8f e3       	ldi	r24, 0x3F	; 63
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	a0 e0       	ldi	r26, 0x00	; 0
     ac4:	b0 e0       	ldi	r27, 0x00	; 0
     ac6:	e8 0e       	add	r14, r24
     ac8:	f9 1e       	adc	r15, r25
     aca:	0a 1f       	adc	r16, r26
     acc:	1b 1f       	adc	r17, r27
     ace:	17 ff       	sbrs	r17, 7
     ad0:	05 c0       	rjmp	.+10     	; 0xadc <__pack_f+0x162>
     ad2:	16 95       	lsr	r17
     ad4:	07 95       	ror	r16
     ad6:	f7 94       	ror	r15
     ad8:	e7 94       	ror	r14
     ada:	31 96       	adiw	r30, 0x01	; 1
     adc:	87 e0       	ldi	r24, 0x07	; 7
     ade:	16 95       	lsr	r17
     ae0:	07 95       	ror	r16
     ae2:	f7 94       	ror	r15
     ae4:	e7 94       	ror	r14
     ae6:	8a 95       	dec	r24
     ae8:	d1 f7       	brne	.-12     	; 0xade <__pack_f+0x164>
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x17c>
     aec:	ee 24       	eor	r14, r14
     aee:	ff 24       	eor	r15, r15
     af0:	87 01       	movw	r16, r14
     af2:	ef ef       	ldi	r30, 0xFF	; 255
     af4:	f0 e0       	ldi	r31, 0x00	; 0
     af6:	6e 2f       	mov	r22, r30
     af8:	67 95       	ror	r22
     afa:	66 27       	eor	r22, r22
     afc:	67 95       	ror	r22
     afe:	90 2f       	mov	r25, r16
     b00:	9f 77       	andi	r25, 0x7F	; 127
     b02:	d7 94       	ror	r13
     b04:	dd 24       	eor	r13, r13
     b06:	d7 94       	ror	r13
     b08:	8e 2f       	mov	r24, r30
     b0a:	86 95       	lsr	r24
     b0c:	49 2f       	mov	r20, r25
     b0e:	46 2b       	or	r20, r22
     b10:	58 2f       	mov	r21, r24
     b12:	5d 29       	or	r21, r13
     b14:	b7 01       	movw	r22, r14
     b16:	ca 01       	movw	r24, r20
     b18:	1f 91       	pop	r17
     b1a:	0f 91       	pop	r16
     b1c:	ff 90       	pop	r15
     b1e:	ef 90       	pop	r14
     b20:	df 90       	pop	r13
     b22:	08 95       	ret

00000b24 <__unpack_f>:
     b24:	fc 01       	movw	r30, r24
     b26:	db 01       	movw	r26, r22
     b28:	40 81       	ld	r20, Z
     b2a:	51 81       	ldd	r21, Z+1	; 0x01
     b2c:	22 81       	ldd	r18, Z+2	; 0x02
     b2e:	62 2f       	mov	r22, r18
     b30:	6f 77       	andi	r22, 0x7F	; 127
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	22 1f       	adc	r18, r18
     b36:	22 27       	eor	r18, r18
     b38:	22 1f       	adc	r18, r18
     b3a:	93 81       	ldd	r25, Z+3	; 0x03
     b3c:	89 2f       	mov	r24, r25
     b3e:	88 0f       	add	r24, r24
     b40:	82 2b       	or	r24, r18
     b42:	28 2f       	mov	r18, r24
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	99 1f       	adc	r25, r25
     b48:	99 27       	eor	r25, r25
     b4a:	99 1f       	adc	r25, r25
     b4c:	11 96       	adiw	r26, 0x01	; 1
     b4e:	9c 93       	st	X, r25
     b50:	11 97       	sbiw	r26, 0x01	; 1
     b52:	21 15       	cp	r18, r1
     b54:	31 05       	cpc	r19, r1
     b56:	a9 f5       	brne	.+106    	; 0xbc2 <__unpack_f+0x9e>
     b58:	41 15       	cp	r20, r1
     b5a:	51 05       	cpc	r21, r1
     b5c:	61 05       	cpc	r22, r1
     b5e:	71 05       	cpc	r23, r1
     b60:	11 f4       	brne	.+4      	; 0xb66 <__unpack_f+0x42>
     b62:	82 e0       	ldi	r24, 0x02	; 2
     b64:	37 c0       	rjmp	.+110    	; 0xbd4 <__unpack_f+0xb0>
     b66:	82 e8       	ldi	r24, 0x82	; 130
     b68:	9f ef       	ldi	r25, 0xFF	; 255
     b6a:	13 96       	adiw	r26, 0x03	; 3
     b6c:	9c 93       	st	X, r25
     b6e:	8e 93       	st	-X, r24
     b70:	12 97       	sbiw	r26, 0x02	; 2
     b72:	9a 01       	movw	r18, r20
     b74:	ab 01       	movw	r20, r22
     b76:	67 e0       	ldi	r22, 0x07	; 7
     b78:	22 0f       	add	r18, r18
     b7a:	33 1f       	adc	r19, r19
     b7c:	44 1f       	adc	r20, r20
     b7e:	55 1f       	adc	r21, r21
     b80:	6a 95       	dec	r22
     b82:	d1 f7       	brne	.-12     	; 0xb78 <__unpack_f+0x54>
     b84:	83 e0       	ldi	r24, 0x03	; 3
     b86:	8c 93       	st	X, r24
     b88:	0d c0       	rjmp	.+26     	; 0xba4 <__unpack_f+0x80>
     b8a:	22 0f       	add	r18, r18
     b8c:	33 1f       	adc	r19, r19
     b8e:	44 1f       	adc	r20, r20
     b90:	55 1f       	adc	r21, r21
     b92:	12 96       	adiw	r26, 0x02	; 2
     b94:	8d 91       	ld	r24, X+
     b96:	9c 91       	ld	r25, X
     b98:	13 97       	sbiw	r26, 0x03	; 3
     b9a:	01 97       	sbiw	r24, 0x01	; 1
     b9c:	13 96       	adiw	r26, 0x03	; 3
     b9e:	9c 93       	st	X, r25
     ba0:	8e 93       	st	-X, r24
     ba2:	12 97       	sbiw	r26, 0x02	; 2
     ba4:	20 30       	cpi	r18, 0x00	; 0
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	38 07       	cpc	r19, r24
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	48 07       	cpc	r20, r24
     bae:	80 e4       	ldi	r24, 0x40	; 64
     bb0:	58 07       	cpc	r21, r24
     bb2:	58 f3       	brcs	.-42     	; 0xb8a <__unpack_f+0x66>
     bb4:	14 96       	adiw	r26, 0x04	; 4
     bb6:	2d 93       	st	X+, r18
     bb8:	3d 93       	st	X+, r19
     bba:	4d 93       	st	X+, r20
     bbc:	5c 93       	st	X, r21
     bbe:	17 97       	sbiw	r26, 0x07	; 7
     bc0:	08 95       	ret
     bc2:	2f 3f       	cpi	r18, 0xFF	; 255
     bc4:	31 05       	cpc	r19, r1
     bc6:	79 f4       	brne	.+30     	; 0xbe6 <__unpack_f+0xc2>
     bc8:	41 15       	cp	r20, r1
     bca:	51 05       	cpc	r21, r1
     bcc:	61 05       	cpc	r22, r1
     bce:	71 05       	cpc	r23, r1
     bd0:	19 f4       	brne	.+6      	; 0xbd8 <__unpack_f+0xb4>
     bd2:	84 e0       	ldi	r24, 0x04	; 4
     bd4:	8c 93       	st	X, r24
     bd6:	08 95       	ret
     bd8:	64 ff       	sbrs	r22, 4
     bda:	03 c0       	rjmp	.+6      	; 0xbe2 <__unpack_f+0xbe>
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	8c 93       	st	X, r24
     be0:	12 c0       	rjmp	.+36     	; 0xc06 <__unpack_f+0xe2>
     be2:	1c 92       	st	X, r1
     be4:	10 c0       	rjmp	.+32     	; 0xc06 <__unpack_f+0xe2>
     be6:	2f 57       	subi	r18, 0x7F	; 127
     be8:	30 40       	sbci	r19, 0x00	; 0
     bea:	13 96       	adiw	r26, 0x03	; 3
     bec:	3c 93       	st	X, r19
     bee:	2e 93       	st	-X, r18
     bf0:	12 97       	sbiw	r26, 0x02	; 2
     bf2:	83 e0       	ldi	r24, 0x03	; 3
     bf4:	8c 93       	st	X, r24
     bf6:	87 e0       	ldi	r24, 0x07	; 7
     bf8:	44 0f       	add	r20, r20
     bfa:	55 1f       	adc	r21, r21
     bfc:	66 1f       	adc	r22, r22
     bfe:	77 1f       	adc	r23, r23
     c00:	8a 95       	dec	r24
     c02:	d1 f7       	brne	.-12     	; 0xbf8 <__unpack_f+0xd4>
     c04:	70 64       	ori	r23, 0x40	; 64
     c06:	14 96       	adiw	r26, 0x04	; 4
     c08:	4d 93       	st	X+, r20
     c0a:	5d 93       	st	X+, r21
     c0c:	6d 93       	st	X+, r22
     c0e:	7c 93       	st	X, r23
     c10:	17 97       	sbiw	r26, 0x07	; 7
     c12:	08 95       	ret

00000c14 <__fpcmp_parts_f>:
     c14:	1f 93       	push	r17
     c16:	dc 01       	movw	r26, r24
     c18:	fb 01       	movw	r30, r22
     c1a:	9c 91       	ld	r25, X
     c1c:	92 30       	cpi	r25, 0x02	; 2
     c1e:	08 f4       	brcc	.+2      	; 0xc22 <__fpcmp_parts_f+0xe>
     c20:	47 c0       	rjmp	.+142    	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c22:	80 81       	ld	r24, Z
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	08 f4       	brcc	.+2      	; 0xc2a <__fpcmp_parts_f+0x16>
     c28:	43 c0       	rjmp	.+134    	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c2a:	94 30       	cpi	r25, 0x04	; 4
     c2c:	51 f4       	brne	.+20     	; 0xc42 <__fpcmp_parts_f+0x2e>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	84 30       	cpi	r24, 0x04	; 4
     c34:	99 f5       	brne	.+102    	; 0xc9c <__fpcmp_parts_f+0x88>
     c36:	81 81       	ldd	r24, Z+1	; 0x01
     c38:	68 2f       	mov	r22, r24
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	61 1b       	sub	r22, r17
     c3e:	71 09       	sbc	r23, r1
     c40:	3f c0       	rjmp	.+126    	; 0xcc0 <__fpcmp_parts_f+0xac>
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	21 f0       	breq	.+8      	; 0xc4e <__fpcmp_parts_f+0x3a>
     c46:	92 30       	cpi	r25, 0x02	; 2
     c48:	31 f4       	brne	.+12     	; 0xc56 <__fpcmp_parts_f+0x42>
     c4a:	82 30       	cpi	r24, 0x02	; 2
     c4c:	b9 f1       	breq	.+110    	; 0xcbc <__fpcmp_parts_f+0xa8>
     c4e:	81 81       	ldd	r24, Z+1	; 0x01
     c50:	88 23       	and	r24, r24
     c52:	89 f1       	breq	.+98     	; 0xcb6 <__fpcmp_parts_f+0xa2>
     c54:	2d c0       	rjmp	.+90     	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c56:	11 96       	adiw	r26, 0x01	; 1
     c58:	1c 91       	ld	r17, X
     c5a:	11 97       	sbiw	r26, 0x01	; 1
     c5c:	82 30       	cpi	r24, 0x02	; 2
     c5e:	f1 f0       	breq	.+60     	; 0xc9c <__fpcmp_parts_f+0x88>
     c60:	81 81       	ldd	r24, Z+1	; 0x01
     c62:	18 17       	cp	r17, r24
     c64:	d9 f4       	brne	.+54     	; 0xc9c <__fpcmp_parts_f+0x88>
     c66:	12 96       	adiw	r26, 0x02	; 2
     c68:	2d 91       	ld	r18, X+
     c6a:	3c 91       	ld	r19, X
     c6c:	13 97       	sbiw	r26, 0x03	; 3
     c6e:	82 81       	ldd	r24, Z+2	; 0x02
     c70:	93 81       	ldd	r25, Z+3	; 0x03
     c72:	82 17       	cp	r24, r18
     c74:	93 07       	cpc	r25, r19
     c76:	94 f0       	brlt	.+36     	; 0xc9c <__fpcmp_parts_f+0x88>
     c78:	28 17       	cp	r18, r24
     c7a:	39 07       	cpc	r19, r25
     c7c:	bc f0       	brlt	.+46     	; 0xcac <__fpcmp_parts_f+0x98>
     c7e:	14 96       	adiw	r26, 0x04	; 4
     c80:	8d 91       	ld	r24, X+
     c82:	9d 91       	ld	r25, X+
     c84:	0d 90       	ld	r0, X+
     c86:	bc 91       	ld	r27, X
     c88:	a0 2d       	mov	r26, r0
     c8a:	24 81       	ldd	r18, Z+4	; 0x04
     c8c:	35 81       	ldd	r19, Z+5	; 0x05
     c8e:	46 81       	ldd	r20, Z+6	; 0x06
     c90:	57 81       	ldd	r21, Z+7	; 0x07
     c92:	28 17       	cp	r18, r24
     c94:	39 07       	cpc	r19, r25
     c96:	4a 07       	cpc	r20, r26
     c98:	5b 07       	cpc	r21, r27
     c9a:	18 f4       	brcc	.+6      	; 0xca2 <__fpcmp_parts_f+0x8e>
     c9c:	11 23       	and	r17, r17
     c9e:	41 f0       	breq	.+16     	; 0xcb0 <__fpcmp_parts_f+0x9c>
     ca0:	0a c0       	rjmp	.+20     	; 0xcb6 <__fpcmp_parts_f+0xa2>
     ca2:	82 17       	cp	r24, r18
     ca4:	93 07       	cpc	r25, r19
     ca6:	a4 07       	cpc	r26, r20
     ca8:	b5 07       	cpc	r27, r21
     caa:	40 f4       	brcc	.+16     	; 0xcbc <__fpcmp_parts_f+0xa8>
     cac:	11 23       	and	r17, r17
     cae:	19 f0       	breq	.+6      	; 0xcb6 <__fpcmp_parts_f+0xa2>
     cb0:	61 e0       	ldi	r22, 0x01	; 1
     cb2:	70 e0       	ldi	r23, 0x00	; 0
     cb4:	05 c0       	rjmp	.+10     	; 0xcc0 <__fpcmp_parts_f+0xac>
     cb6:	6f ef       	ldi	r22, 0xFF	; 255
     cb8:	7f ef       	ldi	r23, 0xFF	; 255
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <__fpcmp_parts_f+0xac>
     cbc:	60 e0       	ldi	r22, 0x00	; 0
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	cb 01       	movw	r24, r22
     cc2:	1f 91       	pop	r17
     cc4:	08 95       	ret

00000cc6 <ADC_initioalized>:
#include "Datatype.h"
#include <avr/io.h>
#include <avr/delay.h>


void ADC_initioalized(void){
     cc6:	df 93       	push	r29
     cc8:	cf 93       	push	r28
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
	// vcc
	Set_bits(ADMUX,REFS0);
     cce:	a7 e2       	ldi	r26, 0x27	; 39
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	e7 e2       	ldi	r30, 0x27	; 39
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	80 64       	ori	r24, 0x40	; 64
     cda:	8c 93       	st	X, r24
	Clear_bits(ADMUX,REFS1);
     cdc:	a7 e2       	ldi	r26, 0x27	; 39
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	e7 e2       	ldi	r30, 0x27	; 39
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	80 81       	ld	r24, Z
     ce6:	8f 77       	andi	r24, 0x7F	; 127
     ce8:	8c 93       	st	X, r24
		Set_bits(ADMUX,ADLAR);
     cea:	a7 e2       	ldi	r26, 0x27	; 39
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e7 e2       	ldi	r30, 0x27	; 39
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	80 62       	ori	r24, 0x20	; 32
     cf6:	8c 93       	st	X, r24



		Set_bits(ADCSRA,ADEN); //enable
     cf8:	a6 e2       	ldi	r26, 0x26	; 38
     cfa:	b0 e0       	ldi	r27, 0x00	; 0
     cfc:	e6 e2       	ldi	r30, 0x26	; 38
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	80 81       	ld	r24, Z
     d02:	80 68       	ori	r24, 0x80	; 128
     d04:	8c 93       	st	X, r24

		// prescaller 128
		Set_bits(ADCSRA,2);
     d06:	a6 e2       	ldi	r26, 0x26	; 38
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	e6 e2       	ldi	r30, 0x26	; 38
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	84 60       	ori	r24, 0x04	; 4
     d12:	8c 93       	st	X, r24
		Set_bits(ADCSRA,1);
     d14:	a6 e2       	ldi	r26, 0x26	; 38
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	e6 e2       	ldi	r30, 0x26	; 38
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	82 60       	ori	r24, 0x02	; 2
     d20:	8c 93       	st	X, r24
		Set_bits(ADCSRA,0);
     d22:	a6 e2       	ldi	r26, 0x26	; 38
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	e6 e2       	ldi	r30, 0x26	; 38
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	81 60       	ori	r24, 0x01	; 1
     d2e:	8c 93       	st	X, r24

		Clear_bits(ADCSRA,ADATE);//disable auto
     d30:	a6 e2       	ldi	r26, 0x26	; 38
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	e6 e2       	ldi	r30, 0x26	; 38
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 81       	ld	r24, Z
     d3a:	8f 7d       	andi	r24, 0xDF	; 223
     d3c:	8c 93       	st	X, r24
		Clear_bits(ADCSRA,ADIE);
     d3e:	a6 e2       	ldi	r26, 0x26	; 38
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	e6 e2       	ldi	r30, 0x26	; 38
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	87 7f       	andi	r24, 0xF7	; 247
     d4a:	8c 93       	st	X, r24

}
     d4c:	cf 91       	pop	r28
     d4e:	df 91       	pop	r29
     d50:	08 95       	ret

00000d52 <ADC_read>:

u16 ADC_read(u8 channle){
     d52:	df 93       	push	r29
     d54:	cf 93       	push	r28
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
     d5a:	67 97       	sbiw	r28, 0x17	; 23
     d5c:	0f b6       	in	r0, 0x3f	; 63
     d5e:	f8 94       	cli
     d60:	de bf       	out	0x3e, r29	; 62
     d62:	0f be       	out	0x3f, r0	; 63
     d64:	cd bf       	out	0x3d, r28	; 61
     d66:	8b 8b       	std	Y+19, r24	; 0x13
	if(channle == 0){
     d68:	8b 89       	ldd	r24, Y+19	; 0x13
     d6a:	88 23       	and	r24, r24
     d6c:	09 f0       	breq	.+2      	; 0xd70 <ADC_read+0x1e>
     d6e:	d6 c0       	rjmp	.+428    	; 0xf1c <ADC_read+0x1ca>
		Clear_bits(ADMUX,0);
     d70:	a7 e2       	ldi	r26, 0x27	; 39
     d72:	b0 e0       	ldi	r27, 0x00	; 0
     d74:	e7 e2       	ldi	r30, 0x27	; 39
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	80 81       	ld	r24, Z
     d7a:	8e 7f       	andi	r24, 0xFE	; 254
     d7c:	8c 93       	st	X, r24
			Clear_bits(ADMUX,1);
     d7e:	a7 e2       	ldi	r26, 0x27	; 39
     d80:	b0 e0       	ldi	r27, 0x00	; 0
     d82:	e7 e2       	ldi	r30, 0x27	; 39
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	8d 7f       	andi	r24, 0xFD	; 253
     d8a:	8c 93       	st	X, r24
			Clear_bits(ADMUX,2);
     d8c:	a7 e2       	ldi	r26, 0x27	; 39
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	e7 e2       	ldi	r30, 0x27	; 39
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	8b 7f       	andi	r24, 0xFB	; 251
     d98:	8c 93       	st	X, r24
			Clear_bits(ADMUX,3);
     d9a:	a7 e2       	ldi	r26, 0x27	; 39
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	e7 e2       	ldi	r30, 0x27	; 39
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	87 7f       	andi	r24, 0xF7	; 247
     da6:	8c 93       	st	X, r24
			Clear_bits(ADMUX,4);
     da8:	a7 e2       	ldi	r26, 0x27	; 39
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	e7 e2       	ldi	r30, 0x27	; 39
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	8f 7e       	andi	r24, 0xEF	; 239
     db4:	8c 93       	st	X, r24
     db6:	80 e0       	ldi	r24, 0x00	; 0
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	a8 ec       	ldi	r26, 0xC8	; 200
     dbc:	b2 e4       	ldi	r27, 0x42	; 66
     dbe:	8b 87       	std	Y+11, r24	; 0x0b
     dc0:	9c 87       	std	Y+12, r25	; 0x0c
     dc2:	ad 87       	std	Y+13, r26	; 0x0d
     dc4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dc6:	6b 85       	ldd	r22, Y+11	; 0x0b
     dc8:	7c 85       	ldd	r23, Y+12	; 0x0c
     dca:	8d 85       	ldd	r24, Y+13	; 0x0d
     dcc:	9e 85       	ldd	r25, Y+14	; 0x0e
     dce:	20 e0       	ldi	r18, 0x00	; 0
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	4a e7       	ldi	r20, 0x7A	; 122
     dd4:	53 e4       	ldi	r21, 0x43	; 67
     dd6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     dda:	dc 01       	movw	r26, r24
     ddc:	cb 01       	movw	r24, r22
     dde:	8f 83       	std	Y+7, r24	; 0x07
     de0:	98 87       	std	Y+8, r25	; 0x08
     de2:	a9 87       	std	Y+9, r26	; 0x09
     de4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     de6:	6f 81       	ldd	r22, Y+7	; 0x07
     de8:	78 85       	ldd	r23, Y+8	; 0x08
     dea:	89 85       	ldd	r24, Y+9	; 0x09
     dec:	9a 85       	ldd	r25, Y+10	; 0x0a
     dee:	20 e0       	ldi	r18, 0x00	; 0
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	40 e8       	ldi	r20, 0x80	; 128
     df4:	5f e3       	ldi	r21, 0x3F	; 63
     df6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     dfa:	88 23       	and	r24, r24
     dfc:	2c f4       	brge	.+10     	; 0xe08 <ADC_read+0xb6>
		__ticks = 1;
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	9e 83       	std	Y+6, r25	; 0x06
     e04:	8d 83       	std	Y+5, r24	; 0x05
     e06:	3f c0       	rjmp	.+126    	; 0xe86 <ADC_read+0x134>
	else if (__tmp > 65535)
     e08:	6f 81       	ldd	r22, Y+7	; 0x07
     e0a:	78 85       	ldd	r23, Y+8	; 0x08
     e0c:	89 85       	ldd	r24, Y+9	; 0x09
     e0e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e10:	20 e0       	ldi	r18, 0x00	; 0
     e12:	3f ef       	ldi	r19, 0xFF	; 255
     e14:	4f e7       	ldi	r20, 0x7F	; 127
     e16:	57 e4       	ldi	r21, 0x47	; 71
     e18:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     e1c:	18 16       	cp	r1, r24
     e1e:	4c f5       	brge	.+82     	; 0xe72 <ADC_read+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e20:	6b 85       	ldd	r22, Y+11	; 0x0b
     e22:	7c 85       	ldd	r23, Y+12	; 0x0c
     e24:	8d 85       	ldd	r24, Y+13	; 0x0d
     e26:	9e 85       	ldd	r25, Y+14	; 0x0e
     e28:	20 e0       	ldi	r18, 0x00	; 0
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	40 e2       	ldi	r20, 0x20	; 32
     e2e:	51 e4       	ldi	r21, 0x41	; 65
     e30:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e34:	dc 01       	movw	r26, r24
     e36:	cb 01       	movw	r24, r22
     e38:	bc 01       	movw	r22, r24
     e3a:	cd 01       	movw	r24, r26
     e3c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e40:	dc 01       	movw	r26, r24
     e42:	cb 01       	movw	r24, r22
     e44:	9e 83       	std	Y+6, r25	; 0x06
     e46:	8d 83       	std	Y+5, r24	; 0x05
     e48:	0f c0       	rjmp	.+30     	; 0xe68 <ADC_read+0x116>
     e4a:	89 e1       	ldi	r24, 0x19	; 25
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	9c 83       	std	Y+4, r25	; 0x04
     e50:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e52:	8b 81       	ldd	r24, Y+3	; 0x03
     e54:	9c 81       	ldd	r25, Y+4	; 0x04
     e56:	01 97       	sbiw	r24, 0x01	; 1
     e58:	f1 f7       	brne	.-4      	; 0xe56 <ADC_read+0x104>
     e5a:	9c 83       	std	Y+4, r25	; 0x04
     e5c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e5e:	8d 81       	ldd	r24, Y+5	; 0x05
     e60:	9e 81       	ldd	r25, Y+6	; 0x06
     e62:	01 97       	sbiw	r24, 0x01	; 1
     e64:	9e 83       	std	Y+6, r25	; 0x06
     e66:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e68:	8d 81       	ldd	r24, Y+5	; 0x05
     e6a:	9e 81       	ldd	r25, Y+6	; 0x06
     e6c:	00 97       	sbiw	r24, 0x00	; 0
     e6e:	69 f7       	brne	.-38     	; 0xe4a <ADC_read+0xf8>
     e70:	14 c0       	rjmp	.+40     	; 0xe9a <ADC_read+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e72:	6f 81       	ldd	r22, Y+7	; 0x07
     e74:	78 85       	ldd	r23, Y+8	; 0x08
     e76:	89 85       	ldd	r24, Y+9	; 0x09
     e78:	9a 85       	ldd	r25, Y+10	; 0x0a
     e7a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e7e:	dc 01       	movw	r26, r24
     e80:	cb 01       	movw	r24, r22
     e82:	9e 83       	std	Y+6, r25	; 0x06
     e84:	8d 83       	std	Y+5, r24	; 0x05
     e86:	8d 81       	ldd	r24, Y+5	; 0x05
     e88:	9e 81       	ldd	r25, Y+6	; 0x06
     e8a:	9a 83       	std	Y+2, r25	; 0x02
     e8c:	89 83       	std	Y+1, r24	; 0x01
     e8e:	89 81       	ldd	r24, Y+1	; 0x01
     e90:	9a 81       	ldd	r25, Y+2	; 0x02
     e92:	01 97       	sbiw	r24, 0x01	; 1
     e94:	f1 f7       	brne	.-4      	; 0xe92 <ADC_read+0x140>
     e96:	9a 83       	std	Y+2, r25	; 0x02
     e98:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(100);
			Set_bits(ADCSRA,ADSC);//start conversion
     e9a:	a6 e2       	ldi	r26, 0x26	; 38
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	e6 e2       	ldi	r30, 0x26	; 38
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	80 64       	ori	r24, 0x40	; 64
     ea6:	8c 93       	st	X, r24
				while (Get_bit_number(ADCSRA,ADSC));
     ea8:	e6 e2       	ldi	r30, 0x26	; 38
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	82 95       	swap	r24
     eb0:	86 95       	lsr	r24
     eb2:	86 95       	lsr	r24
     eb4:	83 70       	andi	r24, 0x03	; 3
     eb6:	88 2f       	mov	r24, r24
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	81 70       	andi	r24, 0x01	; 1
     ebc:	90 70       	andi	r25, 0x00	; 0
     ebe:	88 23       	and	r24, r24
     ec0:	99 f7       	brne	.-26     	; 0xea8 <ADC_read+0x156>
				u16 read1= (((u16)ADCH) <<2);
     ec2:	e5 e2       	ldi	r30, 0x25	; 37
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	88 2f       	mov	r24, r24
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	88 0f       	add	r24, r24
     ece:	99 1f       	adc	r25, r25
     ed0:	88 0f       	add	r24, r24
     ed2:	99 1f       	adc	r25, r25
     ed4:	9a 8b       	std	Y+18, r25	; 0x12
     ed6:	89 8b       	std	Y+17, r24	; 0x11
				read1= read1*4.88;
     ed8:	89 89       	ldd	r24, Y+17	; 0x11
     eda:	9a 89       	ldd	r25, Y+18	; 0x12
     edc:	cc 01       	movw	r24, r24
     ede:	a0 e0       	ldi	r26, 0x00	; 0
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	bc 01       	movw	r22, r24
     ee4:	cd 01       	movw	r24, r26
     ee6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
     eea:	dc 01       	movw	r26, r24
     eec:	cb 01       	movw	r24, r22
     eee:	bc 01       	movw	r22, r24
     ef0:	cd 01       	movw	r24, r26
     ef2:	26 ef       	ldi	r18, 0xF6	; 246
     ef4:	38 e2       	ldi	r19, 0x28	; 40
     ef6:	4c e9       	ldi	r20, 0x9C	; 156
     ef8:	50 e4       	ldi	r21, 0x40	; 64
     efa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     efe:	dc 01       	movw	r26, r24
     f00:	cb 01       	movw	r24, r22
     f02:	bc 01       	movw	r22, r24
     f04:	cd 01       	movw	r24, r26
     f06:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f0a:	dc 01       	movw	r26, r24
     f0c:	cb 01       	movw	r24, r22
     f0e:	9a 8b       	std	Y+18, r25	; 0x12
     f10:	89 8b       	std	Y+17, r24	; 0x11
			    return read1 ;
     f12:	89 89       	ldd	r24, Y+17	; 0x11
     f14:	9a 89       	ldd	r25, Y+18	; 0x12
     f16:	9d 8b       	std	Y+21, r25	; 0x15
     f18:	8c 8b       	std	Y+20, r24	; 0x14
     f1a:	69 c0       	rjmp	.+210    	; 0xfee <ADC_read+0x29c>

	}

	else if(channle == 1){
     f1c:	8b 89       	ldd	r24, Y+19	; 0x13
     f1e:	81 30       	cpi	r24, 0x01	; 1
     f20:	09 f0       	breq	.+2      	; 0xf24 <ADC_read+0x1d2>
     f22:	64 c0       	rjmp	.+200    	; 0xfec <ADC_read+0x29a>
		Set_bits(ADMUX,0);
     f24:	a7 e2       	ldi	r26, 0x27	; 39
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	e7 e2       	ldi	r30, 0x27	; 39
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	81 60       	ori	r24, 0x01	; 1
     f30:	8c 93       	st	X, r24
			Clear_bits(ADMUX,1);
     f32:	a7 e2       	ldi	r26, 0x27	; 39
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	e7 e2       	ldi	r30, 0x27	; 39
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	8d 7f       	andi	r24, 0xFD	; 253
     f3e:	8c 93       	st	X, r24
			Clear_bits(ADMUX,2);
     f40:	a7 e2       	ldi	r26, 0x27	; 39
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e7 e2       	ldi	r30, 0x27	; 39
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	8b 7f       	andi	r24, 0xFB	; 251
     f4c:	8c 93       	st	X, r24
			Clear_bits(ADMUX,3);
     f4e:	a7 e2       	ldi	r26, 0x27	; 39
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	e7 e2       	ldi	r30, 0x27	; 39
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	87 7f       	andi	r24, 0xF7	; 247
     f5a:	8c 93       	st	X, r24
			Clear_bits(ADMUX,4);
     f5c:	a7 e2       	ldi	r26, 0x27	; 39
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	e7 e2       	ldi	r30, 0x27	; 39
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	8f 7e       	andi	r24, 0xEF	; 239
     f68:	8c 93       	st	X, r24
			Set_bits(ADCSRA,ADSC);//start conversion
     f6a:	a6 e2       	ldi	r26, 0x26	; 38
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	e6 e2       	ldi	r30, 0x26	; 38
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	80 64       	ori	r24, 0x40	; 64
     f76:	8c 93       	st	X, r24
				while (Get_bit_number(ADCSRA,ADSC));
     f78:	e6 e2       	ldi	r30, 0x26	; 38
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	82 95       	swap	r24
     f80:	86 95       	lsr	r24
     f82:	86 95       	lsr	r24
     f84:	83 70       	andi	r24, 0x03	; 3
     f86:	88 2f       	mov	r24, r24
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	81 70       	andi	r24, 0x01	; 1
     f8c:	90 70       	andi	r25, 0x00	; 0
     f8e:	88 23       	and	r24, r24
     f90:	99 f7       	brne	.-26     	; 0xf78 <ADC_read+0x226>
				u16 read= (((u16)ADCH) <<2);
     f92:	e5 e2       	ldi	r30, 0x25	; 37
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	88 2f       	mov	r24, r24
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	88 0f       	add	r24, r24
     f9e:	99 1f       	adc	r25, r25
     fa0:	88 0f       	add	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	98 8b       	std	Y+16, r25	; 0x10
     fa6:	8f 87       	std	Y+15, r24	; 0x0f
				read= read*4.88;
     fa8:	8f 85       	ldd	r24, Y+15	; 0x0f
     faa:	98 89       	ldd	r25, Y+16	; 0x10
     fac:	cc 01       	movw	r24, r24
     fae:	a0 e0       	ldi	r26, 0x00	; 0
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	bc 01       	movw	r22, r24
     fb4:	cd 01       	movw	r24, r26
     fb6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
     fba:	dc 01       	movw	r26, r24
     fbc:	cb 01       	movw	r24, r22
     fbe:	bc 01       	movw	r22, r24
     fc0:	cd 01       	movw	r24, r26
     fc2:	26 ef       	ldi	r18, 0xF6	; 246
     fc4:	38 e2       	ldi	r19, 0x28	; 40
     fc6:	4c e9       	ldi	r20, 0x9C	; 156
     fc8:	50 e4       	ldi	r21, 0x40	; 64
     fca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fce:	dc 01       	movw	r26, r24
     fd0:	cb 01       	movw	r24, r22
     fd2:	bc 01       	movw	r22, r24
     fd4:	cd 01       	movw	r24, r26
     fd6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fda:	dc 01       	movw	r26, r24
     fdc:	cb 01       	movw	r24, r22
     fde:	98 8b       	std	Y+16, r25	; 0x10
     fe0:	8f 87       	std	Y+15, r24	; 0x0f
			    return read ;
     fe2:	8f 85       	ldd	r24, Y+15	; 0x0f
     fe4:	98 89       	ldd	r25, Y+16	; 0x10
     fe6:	9d 8b       	std	Y+21, r25	; 0x15
     fe8:	8c 8b       	std	Y+20, r24	; 0x14
     fea:	01 c0       	rjmp	.+2      	; 0xfee <ADC_read+0x29c>
     fec:	04 c0       	rjmp	.+8      	; 0xff6 <ADC_read+0x2a4>

	}

}
     fee:	8c 89       	ldd	r24, Y+20	; 0x14
     ff0:	9d 89       	ldd	r25, Y+21	; 0x15
     ff2:	9f 8b       	std	Y+23, r25	; 0x17
     ff4:	8e 8b       	std	Y+22, r24	; 0x16
     ff6:	8e 89       	ldd	r24, Y+22	; 0x16
     ff8:	9f 89       	ldd	r25, Y+23	; 0x17
     ffa:	67 96       	adiw	r28, 0x17	; 23
     ffc:	0f b6       	in	r0, 0x3f	; 63
     ffe:	f8 94       	cli
    1000:	de bf       	out	0x3e, r29	; 62
    1002:	0f be       	out	0x3f, r0	; 63
    1004:	cd bf       	out	0x3d, r28	; 61
    1006:	cf 91       	pop	r28
    1008:	df 91       	pop	r29
    100a:	08 95       	ret

0000100c <DIO_vSerPinDirection>:
#include "DIO_int.h"
#include "Bit_modification.h"
#include <avr/io.h>

void DIO_vSerPinDirection(u8 PortNumber , u8 PinNumber , u8 Direction)
{
    100c:	df 93       	push	r29
    100e:	cf 93       	push	r28
    1010:	00 d0       	rcall	.+0      	; 0x1012 <DIO_vSerPinDirection+0x6>
    1012:	00 d0       	rcall	.+0      	; 0x1014 <DIO_vSerPinDirection+0x8>
    1014:	0f 92       	push	r0
    1016:	cd b7       	in	r28, 0x3d	; 61
    1018:	de b7       	in	r29, 0x3e	; 62
    101a:	89 83       	std	Y+1, r24	; 0x01
    101c:	6a 83       	std	Y+2, r22	; 0x02
    101e:	4b 83       	std	Y+3, r20	; 0x03
 switch (PortNumber)
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	3d 83       	std	Y+5, r19	; 0x05
    1028:	2c 83       	std	Y+4, r18	; 0x04
    102a:	8c 81       	ldd	r24, Y+4	; 0x04
    102c:	9d 81       	ldd	r25, Y+5	; 0x05
    102e:	81 30       	cpi	r24, 0x01	; 1
    1030:	91 05       	cpc	r25, r1
    1032:	09 f4       	brne	.+2      	; 0x1036 <DIO_vSerPinDirection+0x2a>
    1034:	43 c0       	rjmp	.+134    	; 0x10bc <DIO_vSerPinDirection+0xb0>
    1036:	2c 81       	ldd	r18, Y+4	; 0x04
    1038:	3d 81       	ldd	r19, Y+5	; 0x05
    103a:	22 30       	cpi	r18, 0x02	; 2
    103c:	31 05       	cpc	r19, r1
    103e:	2c f4       	brge	.+10     	; 0x104a <DIO_vSerPinDirection+0x3e>
    1040:	8c 81       	ldd	r24, Y+4	; 0x04
    1042:	9d 81       	ldd	r25, Y+5	; 0x05
    1044:	00 97       	sbiw	r24, 0x00	; 0
    1046:	71 f0       	breq	.+28     	; 0x1064 <DIO_vSerPinDirection+0x58>
    1048:	bc c0       	rjmp	.+376    	; 0x11c2 <DIO_vSerPinDirection+0x1b6>
    104a:	2c 81       	ldd	r18, Y+4	; 0x04
    104c:	3d 81       	ldd	r19, Y+5	; 0x05
    104e:	22 30       	cpi	r18, 0x02	; 2
    1050:	31 05       	cpc	r19, r1
    1052:	09 f4       	brne	.+2      	; 0x1056 <DIO_vSerPinDirection+0x4a>
    1054:	5f c0       	rjmp	.+190    	; 0x1114 <DIO_vSerPinDirection+0x108>
    1056:	8c 81       	ldd	r24, Y+4	; 0x04
    1058:	9d 81       	ldd	r25, Y+5	; 0x05
    105a:	83 30       	cpi	r24, 0x03	; 3
    105c:	91 05       	cpc	r25, r1
    105e:	09 f4       	brne	.+2      	; 0x1062 <DIO_vSerPinDirection+0x56>
    1060:	85 c0       	rjmp	.+266    	; 0x116c <DIO_vSerPinDirection+0x160>
    1062:	af c0       	rjmp	.+350    	; 0x11c2 <DIO_vSerPinDirection+0x1b6>
 {
 case DIO_PORTA:
	 if(Direction == DIO_OUTPUT){
    1064:	8b 81       	ldd	r24, Y+3	; 0x03
    1066:	81 30       	cpi	r24, 0x01	; 1
    1068:	a1 f4       	brne	.+40     	; 0x1092 <DIO_vSerPinDirection+0x86>
		 Set_bits(DDRA,PinNumber);
    106a:	aa e3       	ldi	r26, 0x3A	; 58
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	ea e3       	ldi	r30, 0x3A	; 58
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	48 2f       	mov	r20, r24
    1076:	8a 81       	ldd	r24, Y+2	; 0x02
    1078:	28 2f       	mov	r18, r24
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	02 2e       	mov	r0, r18
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <DIO_vSerPinDirection+0x7c>
    1084:	88 0f       	add	r24, r24
    1086:	99 1f       	adc	r25, r25
    1088:	0a 94       	dec	r0
    108a:	e2 f7       	brpl	.-8      	; 0x1084 <DIO_vSerPinDirection+0x78>
    108c:	84 2b       	or	r24, r20
    108e:	8c 93       	st	X, r24
    1090:	98 c0       	rjmp	.+304    	; 0x11c2 <DIO_vSerPinDirection+0x1b6>
	 }
	 else {
		 Clear_bits(DDRA,PinNumber);
    1092:	aa e3       	ldi	r26, 0x3A	; 58
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	ea e3       	ldi	r30, 0x3A	; 58
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	48 2f       	mov	r20, r24
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	02 2e       	mov	r0, r18
    10aa:	02 c0       	rjmp	.+4      	; 0x10b0 <DIO_vSerPinDirection+0xa4>
    10ac:	88 0f       	add	r24, r24
    10ae:	99 1f       	adc	r25, r25
    10b0:	0a 94       	dec	r0
    10b2:	e2 f7       	brpl	.-8      	; 0x10ac <DIO_vSerPinDirection+0xa0>
    10b4:	80 95       	com	r24
    10b6:	84 23       	and	r24, r20
    10b8:	8c 93       	st	X, r24
    10ba:	83 c0       	rjmp	.+262    	; 0x11c2 <DIO_vSerPinDirection+0x1b6>
	 }
	 break;
 case DIO_PORTB:
	 if(Direction == DIO_OUTPUT){
    10bc:	8b 81       	ldd	r24, Y+3	; 0x03
    10be:	81 30       	cpi	r24, 0x01	; 1
    10c0:	a1 f4       	brne	.+40     	; 0x10ea <DIO_vSerPinDirection+0xde>
		 Set_bits(DDRB,PinNumber);
    10c2:	a7 e3       	ldi	r26, 0x37	; 55
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	e7 e3       	ldi	r30, 0x37	; 55
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	48 2f       	mov	r20, r24
    10ce:	8a 81       	ldd	r24, Y+2	; 0x02
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	02 2e       	mov	r0, r18
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <DIO_vSerPinDirection+0xd4>
    10dc:	88 0f       	add	r24, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	0a 94       	dec	r0
    10e2:	e2 f7       	brpl	.-8      	; 0x10dc <DIO_vSerPinDirection+0xd0>
    10e4:	84 2b       	or	r24, r20
    10e6:	8c 93       	st	X, r24
    10e8:	6c c0       	rjmp	.+216    	; 0x11c2 <DIO_vSerPinDirection+0x1b6>
	 }
	 else {
		 Clear_bits(DDRB,PinNumber);
    10ea:	a7 e3       	ldi	r26, 0x37	; 55
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	e7 e3       	ldi	r30, 0x37	; 55
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	48 2f       	mov	r20, r24
    10f6:	8a 81       	ldd	r24, Y+2	; 0x02
    10f8:	28 2f       	mov	r18, r24
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	02 2e       	mov	r0, r18
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <DIO_vSerPinDirection+0xfc>
    1104:	88 0f       	add	r24, r24
    1106:	99 1f       	adc	r25, r25
    1108:	0a 94       	dec	r0
    110a:	e2 f7       	brpl	.-8      	; 0x1104 <DIO_vSerPinDirection+0xf8>
    110c:	80 95       	com	r24
    110e:	84 23       	and	r24, r20
    1110:	8c 93       	st	X, r24
    1112:	57 c0       	rjmp	.+174    	; 0x11c2 <DIO_vSerPinDirection+0x1b6>
	 }
	 break;
 case DIO_PORTC:
	 if(Direction == DIO_OUTPUT){
    1114:	8b 81       	ldd	r24, Y+3	; 0x03
    1116:	81 30       	cpi	r24, 0x01	; 1
    1118:	a1 f4       	brne	.+40     	; 0x1142 <DIO_vSerPinDirection+0x136>
		 Set_bits(DDRC,PinNumber);
    111a:	a4 e3       	ldi	r26, 0x34	; 52
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	e4 e3       	ldi	r30, 0x34	; 52
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	48 2f       	mov	r20, r24
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	28 2f       	mov	r18, r24
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	02 2e       	mov	r0, r18
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <DIO_vSerPinDirection+0x12c>
    1134:	88 0f       	add	r24, r24
    1136:	99 1f       	adc	r25, r25
    1138:	0a 94       	dec	r0
    113a:	e2 f7       	brpl	.-8      	; 0x1134 <DIO_vSerPinDirection+0x128>
    113c:	84 2b       	or	r24, r20
    113e:	8c 93       	st	X, r24
    1140:	40 c0       	rjmp	.+128    	; 0x11c2 <DIO_vSerPinDirection+0x1b6>
	 }
	 else {
		 Clear_bits(DDRC,PinNumber);
    1142:	a4 e3       	ldi	r26, 0x34	; 52
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	e4 e3       	ldi	r30, 0x34	; 52
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	48 2f       	mov	r20, r24
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	02 2e       	mov	r0, r18
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <DIO_vSerPinDirection+0x154>
    115c:	88 0f       	add	r24, r24
    115e:	99 1f       	adc	r25, r25
    1160:	0a 94       	dec	r0
    1162:	e2 f7       	brpl	.-8      	; 0x115c <DIO_vSerPinDirection+0x150>
    1164:	80 95       	com	r24
    1166:	84 23       	and	r24, r20
    1168:	8c 93       	st	X, r24
    116a:	2b c0       	rjmp	.+86     	; 0x11c2 <DIO_vSerPinDirection+0x1b6>
	 }
	 break;
 case DIO_PORTD:
	 if(Direction == DIO_OUTPUT){
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	81 30       	cpi	r24, 0x01	; 1
    1170:	a1 f4       	brne	.+40     	; 0x119a <DIO_vSerPinDirection+0x18e>
		 Set_bits(DDRD,PinNumber);
    1172:	a1 e3       	ldi	r26, 0x31	; 49
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	e1 e3       	ldi	r30, 0x31	; 49
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	48 2f       	mov	r20, r24
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	02 2e       	mov	r0, r18
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <DIO_vSerPinDirection+0x184>
    118c:	88 0f       	add	r24, r24
    118e:	99 1f       	adc	r25, r25
    1190:	0a 94       	dec	r0
    1192:	e2 f7       	brpl	.-8      	; 0x118c <DIO_vSerPinDirection+0x180>
    1194:	84 2b       	or	r24, r20
    1196:	8c 93       	st	X, r24
    1198:	14 c0       	rjmp	.+40     	; 0x11c2 <DIO_vSerPinDirection+0x1b6>
	 }
	 else {
		 Clear_bits(DDRD,PinNumber);
    119a:	a1 e3       	ldi	r26, 0x31	; 49
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	e1 e3       	ldi	r30, 0x31	; 49
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	48 2f       	mov	r20, r24
    11a6:	8a 81       	ldd	r24, Y+2	; 0x02
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	02 2e       	mov	r0, r18
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <DIO_vSerPinDirection+0x1ac>
    11b4:	88 0f       	add	r24, r24
    11b6:	99 1f       	adc	r25, r25
    11b8:	0a 94       	dec	r0
    11ba:	e2 f7       	brpl	.-8      	; 0x11b4 <DIO_vSerPinDirection+0x1a8>
    11bc:	80 95       	com	r24
    11be:	84 23       	and	r24, r20
    11c0:	8c 93       	st	X, r24
	 }
	 break;
 }
}
    11c2:	0f 90       	pop	r0
    11c4:	0f 90       	pop	r0
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	0f 90       	pop	r0
    11cc:	cf 91       	pop	r28
    11ce:	df 91       	pop	r29
    11d0:	08 95       	ret

000011d2 <DIO_vSetPinValue>:
void DIO_vSetPinValue(u8 PortNumber , u8 PinNumber , u8 Value){
    11d2:	df 93       	push	r29
    11d4:	cf 93       	push	r28
    11d6:	00 d0       	rcall	.+0      	; 0x11d8 <DIO_vSetPinValue+0x6>
    11d8:	00 d0       	rcall	.+0      	; 0x11da <DIO_vSetPinValue+0x8>
    11da:	0f 92       	push	r0
    11dc:	cd b7       	in	r28, 0x3d	; 61
    11de:	de b7       	in	r29, 0x3e	; 62
    11e0:	89 83       	std	Y+1, r24	; 0x01
    11e2:	6a 83       	std	Y+2, r22	; 0x02
    11e4:	4b 83       	std	Y+3, r20	; 0x03
	 switch (PortNumber)
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	3d 83       	std	Y+5, r19	; 0x05
    11ee:	2c 83       	std	Y+4, r18	; 0x04
    11f0:	8c 81       	ldd	r24, Y+4	; 0x04
    11f2:	9d 81       	ldd	r25, Y+5	; 0x05
    11f4:	81 30       	cpi	r24, 0x01	; 1
    11f6:	91 05       	cpc	r25, r1
    11f8:	09 f4       	brne	.+2      	; 0x11fc <DIO_vSetPinValue+0x2a>
    11fa:	43 c0       	rjmp	.+134    	; 0x1282 <DIO_vSetPinValue+0xb0>
    11fc:	2c 81       	ldd	r18, Y+4	; 0x04
    11fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1200:	22 30       	cpi	r18, 0x02	; 2
    1202:	31 05       	cpc	r19, r1
    1204:	2c f4       	brge	.+10     	; 0x1210 <DIO_vSetPinValue+0x3e>
    1206:	8c 81       	ldd	r24, Y+4	; 0x04
    1208:	9d 81       	ldd	r25, Y+5	; 0x05
    120a:	00 97       	sbiw	r24, 0x00	; 0
    120c:	71 f0       	breq	.+28     	; 0x122a <DIO_vSetPinValue+0x58>
    120e:	bc c0       	rjmp	.+376    	; 0x1388 <DIO_vSetPinValue+0x1b6>
    1210:	2c 81       	ldd	r18, Y+4	; 0x04
    1212:	3d 81       	ldd	r19, Y+5	; 0x05
    1214:	22 30       	cpi	r18, 0x02	; 2
    1216:	31 05       	cpc	r19, r1
    1218:	09 f4       	brne	.+2      	; 0x121c <DIO_vSetPinValue+0x4a>
    121a:	5f c0       	rjmp	.+190    	; 0x12da <DIO_vSetPinValue+0x108>
    121c:	8c 81       	ldd	r24, Y+4	; 0x04
    121e:	9d 81       	ldd	r25, Y+5	; 0x05
    1220:	83 30       	cpi	r24, 0x03	; 3
    1222:	91 05       	cpc	r25, r1
    1224:	09 f4       	brne	.+2      	; 0x1228 <DIO_vSetPinValue+0x56>
    1226:	85 c0       	rjmp	.+266    	; 0x1332 <DIO_vSetPinValue+0x160>
    1228:	af c0       	rjmp	.+350    	; 0x1388 <DIO_vSetPinValue+0x1b6>
	 {
	 case DIO_PORTA:
		 if(Value == DIO_HIGH){
    122a:	8b 81       	ldd	r24, Y+3	; 0x03
    122c:	81 30       	cpi	r24, 0x01	; 1
    122e:	a1 f4       	brne	.+40     	; 0x1258 <DIO_vSetPinValue+0x86>
			 Set_bits(PORTA,PinNumber);
    1230:	ab e3       	ldi	r26, 0x3B	; 59
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	eb e3       	ldi	r30, 0x3B	; 59
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	48 2f       	mov	r20, r24
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	28 2f       	mov	r18, r24
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	02 2e       	mov	r0, r18
    1248:	02 c0       	rjmp	.+4      	; 0x124e <DIO_vSetPinValue+0x7c>
    124a:	88 0f       	add	r24, r24
    124c:	99 1f       	adc	r25, r25
    124e:	0a 94       	dec	r0
    1250:	e2 f7       	brpl	.-8      	; 0x124a <DIO_vSetPinValue+0x78>
    1252:	84 2b       	or	r24, r20
    1254:	8c 93       	st	X, r24
    1256:	98 c0       	rjmp	.+304    	; 0x1388 <DIO_vSetPinValue+0x1b6>
		 }
		 else {
			 Clear_bits(PORTA,PinNumber);
    1258:	ab e3       	ldi	r26, 0x3B	; 59
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	eb e3       	ldi	r30, 0x3B	; 59
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	48 2f       	mov	r20, r24
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	28 2f       	mov	r18, r24
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	02 2e       	mov	r0, r18
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <DIO_vSetPinValue+0xa4>
    1272:	88 0f       	add	r24, r24
    1274:	99 1f       	adc	r25, r25
    1276:	0a 94       	dec	r0
    1278:	e2 f7       	brpl	.-8      	; 0x1272 <DIO_vSetPinValue+0xa0>
    127a:	80 95       	com	r24
    127c:	84 23       	and	r24, r20
    127e:	8c 93       	st	X, r24
    1280:	83 c0       	rjmp	.+262    	; 0x1388 <DIO_vSetPinValue+0x1b6>
		 }
		 break;
	 case DIO_PORTB:
		 if(Value == DIO_OUTPUT){
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	81 30       	cpi	r24, 0x01	; 1
    1286:	a1 f4       	brne	.+40     	; 0x12b0 <DIO_vSetPinValue+0xde>
			 Set_bits(PORTB,PinNumber);
    1288:	a8 e3       	ldi	r26, 0x38	; 56
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	e8 e3       	ldi	r30, 0x38	; 56
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	48 2f       	mov	r20, r24
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	02 2e       	mov	r0, r18
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <DIO_vSetPinValue+0xd4>
    12a2:	88 0f       	add	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	0a 94       	dec	r0
    12a8:	e2 f7       	brpl	.-8      	; 0x12a2 <DIO_vSetPinValue+0xd0>
    12aa:	84 2b       	or	r24, r20
    12ac:	8c 93       	st	X, r24
    12ae:	6c c0       	rjmp	.+216    	; 0x1388 <DIO_vSetPinValue+0x1b6>
		 }
		 else {
			 Clear_bits(PORTB,PinNumber);
    12b0:	a8 e3       	ldi	r26, 0x38	; 56
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	e8 e3       	ldi	r30, 0x38	; 56
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	48 2f       	mov	r20, r24
    12bc:	8a 81       	ldd	r24, Y+2	; 0x02
    12be:	28 2f       	mov	r18, r24
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	02 2e       	mov	r0, r18
    12c8:	02 c0       	rjmp	.+4      	; 0x12ce <DIO_vSetPinValue+0xfc>
    12ca:	88 0f       	add	r24, r24
    12cc:	99 1f       	adc	r25, r25
    12ce:	0a 94       	dec	r0
    12d0:	e2 f7       	brpl	.-8      	; 0x12ca <DIO_vSetPinValue+0xf8>
    12d2:	80 95       	com	r24
    12d4:	84 23       	and	r24, r20
    12d6:	8c 93       	st	X, r24
    12d8:	57 c0       	rjmp	.+174    	; 0x1388 <DIO_vSetPinValue+0x1b6>
		 }
		 break;
	 case DIO_PORTC:
		 if(Value == DIO_OUTPUT){
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	81 30       	cpi	r24, 0x01	; 1
    12de:	a1 f4       	brne	.+40     	; 0x1308 <DIO_vSetPinValue+0x136>
			 Set_bits(PORTC,PinNumber);
    12e0:	a5 e3       	ldi	r26, 0x35	; 53
    12e2:	b0 e0       	ldi	r27, 0x00	; 0
    12e4:	e5 e3       	ldi	r30, 0x35	; 53
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	48 2f       	mov	r20, r24
    12ec:	8a 81       	ldd	r24, Y+2	; 0x02
    12ee:	28 2f       	mov	r18, r24
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	02 2e       	mov	r0, r18
    12f8:	02 c0       	rjmp	.+4      	; 0x12fe <DIO_vSetPinValue+0x12c>
    12fa:	88 0f       	add	r24, r24
    12fc:	99 1f       	adc	r25, r25
    12fe:	0a 94       	dec	r0
    1300:	e2 f7       	brpl	.-8      	; 0x12fa <DIO_vSetPinValue+0x128>
    1302:	84 2b       	or	r24, r20
    1304:	8c 93       	st	X, r24
    1306:	40 c0       	rjmp	.+128    	; 0x1388 <DIO_vSetPinValue+0x1b6>
		 }
		 else {
			 Clear_bits(PORTC,PinNumber);
    1308:	a5 e3       	ldi	r26, 0x35	; 53
    130a:	b0 e0       	ldi	r27, 0x00	; 0
    130c:	e5 e3       	ldi	r30, 0x35	; 53
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	48 2f       	mov	r20, r24
    1314:	8a 81       	ldd	r24, Y+2	; 0x02
    1316:	28 2f       	mov	r18, r24
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	02 2e       	mov	r0, r18
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <DIO_vSetPinValue+0x154>
    1322:	88 0f       	add	r24, r24
    1324:	99 1f       	adc	r25, r25
    1326:	0a 94       	dec	r0
    1328:	e2 f7       	brpl	.-8      	; 0x1322 <DIO_vSetPinValue+0x150>
    132a:	80 95       	com	r24
    132c:	84 23       	and	r24, r20
    132e:	8c 93       	st	X, r24
    1330:	2b c0       	rjmp	.+86     	; 0x1388 <DIO_vSetPinValue+0x1b6>
		 }
		 break;
	 case DIO_PORTD:
		 if(Value == DIO_OUTPUT){
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	81 30       	cpi	r24, 0x01	; 1
    1336:	a1 f4       	brne	.+40     	; 0x1360 <DIO_vSetPinValue+0x18e>
			 Set_bits(PORTD,PinNumber);
    1338:	a2 e3       	ldi	r26, 0x32	; 50
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	e2 e3       	ldi	r30, 0x32	; 50
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	48 2f       	mov	r20, r24
    1344:	8a 81       	ldd	r24, Y+2	; 0x02
    1346:	28 2f       	mov	r18, r24
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	02 2e       	mov	r0, r18
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <DIO_vSetPinValue+0x184>
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	0a 94       	dec	r0
    1358:	e2 f7       	brpl	.-8      	; 0x1352 <DIO_vSetPinValue+0x180>
    135a:	84 2b       	or	r24, r20
    135c:	8c 93       	st	X, r24
    135e:	14 c0       	rjmp	.+40     	; 0x1388 <DIO_vSetPinValue+0x1b6>
		 }
		 else {
			 Clear_bits(PORTD,PinNumber);
    1360:	a2 e3       	ldi	r26, 0x32	; 50
    1362:	b0 e0       	ldi	r27, 0x00	; 0
    1364:	e2 e3       	ldi	r30, 0x32	; 50
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	48 2f       	mov	r20, r24
    136c:	8a 81       	ldd	r24, Y+2	; 0x02
    136e:	28 2f       	mov	r18, r24
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	02 2e       	mov	r0, r18
    1378:	02 c0       	rjmp	.+4      	; 0x137e <DIO_vSetPinValue+0x1ac>
    137a:	88 0f       	add	r24, r24
    137c:	99 1f       	adc	r25, r25
    137e:	0a 94       	dec	r0
    1380:	e2 f7       	brpl	.-8      	; 0x137a <DIO_vSetPinValue+0x1a8>
    1382:	80 95       	com	r24
    1384:	84 23       	and	r24, r20
    1386:	8c 93       	st	X, r24
		 }
		 break;
	 }
}
    1388:	0f 90       	pop	r0
    138a:	0f 90       	pop	r0
    138c:	0f 90       	pop	r0
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	cf 91       	pop	r28
    1394:	df 91       	pop	r29
    1396:	08 95       	ret

00001398 <DIO_vGetPinValue>:
int DIO_vGetPinValue(u8 PortNumber , u8 PinNumber){
    1398:	df 93       	push	r29
    139a:	cf 93       	push	r28
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
    13a0:	28 97       	sbiw	r28, 0x08	; 8
    13a2:	0f b6       	in	r0, 0x3f	; 63
    13a4:	f8 94       	cli
    13a6:	de bf       	out	0x3e, r29	; 62
    13a8:	0f be       	out	0x3f, r0	; 63
    13aa:	cd bf       	out	0x3d, r28	; 61
    13ac:	89 83       	std	Y+1, r24	; 0x01
    13ae:	6a 83       	std	Y+2, r22	; 0x02
	 switch (PortNumber)
    13b0:	89 81       	ldd	r24, Y+1	; 0x01
    13b2:	28 2f       	mov	r18, r24
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	3e 83       	std	Y+6, r19	; 0x06
    13b8:	2d 83       	std	Y+5, r18	; 0x05
    13ba:	4d 81       	ldd	r20, Y+5	; 0x05
    13bc:	5e 81       	ldd	r21, Y+6	; 0x06
    13be:	41 30       	cpi	r20, 0x01	; 1
    13c0:	51 05       	cpc	r21, r1
    13c2:	61 f1       	breq	.+88     	; 0x141c <DIO_vGetPinValue+0x84>
    13c4:	8d 81       	ldd	r24, Y+5	; 0x05
    13c6:	9e 81       	ldd	r25, Y+6	; 0x06
    13c8:	82 30       	cpi	r24, 0x02	; 2
    13ca:	91 05       	cpc	r25, r1
    13cc:	34 f4       	brge	.+12     	; 0x13da <DIO_vGetPinValue+0x42>
    13ce:	2d 81       	ldd	r18, Y+5	; 0x05
    13d0:	3e 81       	ldd	r19, Y+6	; 0x06
    13d2:	21 15       	cp	r18, r1
    13d4:	31 05       	cpc	r19, r1
    13d6:	69 f0       	breq	.+26     	; 0x13f2 <DIO_vGetPinValue+0x5a>
    13d8:	60 c0       	rjmp	.+192    	; 0x149a <DIO_vGetPinValue+0x102>
    13da:	4d 81       	ldd	r20, Y+5	; 0x05
    13dc:	5e 81       	ldd	r21, Y+6	; 0x06
    13de:	42 30       	cpi	r20, 0x02	; 2
    13e0:	51 05       	cpc	r21, r1
    13e2:	89 f1       	breq	.+98     	; 0x1446 <DIO_vGetPinValue+0xae>
    13e4:	8d 81       	ldd	r24, Y+5	; 0x05
    13e6:	9e 81       	ldd	r25, Y+6	; 0x06
    13e8:	83 30       	cpi	r24, 0x03	; 3
    13ea:	91 05       	cpc	r25, r1
    13ec:	09 f4       	brne	.+2      	; 0x13f0 <DIO_vGetPinValue+0x58>
    13ee:	40 c0       	rjmp	.+128    	; 0x1470 <DIO_vGetPinValue+0xd8>
    13f0:	54 c0       	rjmp	.+168    	; 0x149a <DIO_vGetPinValue+0x102>
	 {
	 case DIO_PORTA:
		 return  Get_bit_number(PINA,PinNumber);
    13f2:	e9 e3       	ldi	r30, 0x39	; 57
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	28 2f       	mov	r18, r24
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	8a 81       	ldd	r24, Y+2	; 0x02
    13fe:	88 2f       	mov	r24, r24
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	a9 01       	movw	r20, r18
    1404:	02 c0       	rjmp	.+4      	; 0x140a <DIO_vGetPinValue+0x72>
    1406:	55 95       	asr	r21
    1408:	47 95       	ror	r20
    140a:	8a 95       	dec	r24
    140c:	e2 f7       	brpl	.-8      	; 0x1406 <DIO_vGetPinValue+0x6e>
    140e:	ca 01       	movw	r24, r20
    1410:	9c 01       	movw	r18, r24
    1412:	21 70       	andi	r18, 0x01	; 1
    1414:	30 70       	andi	r19, 0x00	; 0
    1416:	3c 83       	std	Y+4, r19	; 0x04
    1418:	2b 83       	std	Y+3, r18	; 0x03
    141a:	40 c0       	rjmp	.+128    	; 0x149c <DIO_vGetPinValue+0x104>
		 break;
	 case DIO_PORTB:
		 return  Get_bit_number(PINB,PinNumber);
    141c:	e6 e3       	ldi	r30, 0x36	; 54
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	28 2f       	mov	r18, r24
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	8a 81       	ldd	r24, Y+2	; 0x02
    1428:	88 2f       	mov	r24, r24
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	a9 01       	movw	r20, r18
    142e:	02 c0       	rjmp	.+4      	; 0x1434 <DIO_vGetPinValue+0x9c>
    1430:	55 95       	asr	r21
    1432:	47 95       	ror	r20
    1434:	8a 95       	dec	r24
    1436:	e2 f7       	brpl	.-8      	; 0x1430 <DIO_vGetPinValue+0x98>
    1438:	ca 01       	movw	r24, r20
    143a:	9c 01       	movw	r18, r24
    143c:	21 70       	andi	r18, 0x01	; 1
    143e:	30 70       	andi	r19, 0x00	; 0
    1440:	3c 83       	std	Y+4, r19	; 0x04
    1442:	2b 83       	std	Y+3, r18	; 0x03
    1444:	2b c0       	rjmp	.+86     	; 0x149c <DIO_vGetPinValue+0x104>
			 break;
	 case DIO_PORTC:
		 return  Get_bit_number(PINC,PinNumber);
    1446:	e3 e3       	ldi	r30, 0x33	; 51
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	28 2f       	mov	r18, r24
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	8a 81       	ldd	r24, Y+2	; 0x02
    1452:	88 2f       	mov	r24, r24
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	a9 01       	movw	r20, r18
    1458:	02 c0       	rjmp	.+4      	; 0x145e <DIO_vGetPinValue+0xc6>
    145a:	55 95       	asr	r21
    145c:	47 95       	ror	r20
    145e:	8a 95       	dec	r24
    1460:	e2 f7       	brpl	.-8      	; 0x145a <DIO_vGetPinValue+0xc2>
    1462:	ca 01       	movw	r24, r20
    1464:	9c 01       	movw	r18, r24
    1466:	21 70       	andi	r18, 0x01	; 1
    1468:	30 70       	andi	r19, 0x00	; 0
    146a:	3c 83       	std	Y+4, r19	; 0x04
    146c:	2b 83       	std	Y+3, r18	; 0x03
    146e:	16 c0       	rjmp	.+44     	; 0x149c <DIO_vGetPinValue+0x104>
			 break;
	 case DIO_PORTD:
		 return  Get_bit_number(PIND,PinNumber);
    1470:	e0 e3       	ldi	r30, 0x30	; 48
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	28 2f       	mov	r18, r24
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	8a 81       	ldd	r24, Y+2	; 0x02
    147c:	88 2f       	mov	r24, r24
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	a9 01       	movw	r20, r18
    1482:	02 c0       	rjmp	.+4      	; 0x1488 <DIO_vGetPinValue+0xf0>
    1484:	55 95       	asr	r21
    1486:	47 95       	ror	r20
    1488:	8a 95       	dec	r24
    148a:	e2 f7       	brpl	.-8      	; 0x1484 <DIO_vGetPinValue+0xec>
    148c:	ca 01       	movw	r24, r20
    148e:	9c 01       	movw	r18, r24
    1490:	21 70       	andi	r18, 0x01	; 1
    1492:	30 70       	andi	r19, 0x00	; 0
    1494:	3c 83       	std	Y+4, r19	; 0x04
    1496:	2b 83       	std	Y+3, r18	; 0x03
    1498:	01 c0       	rjmp	.+2      	; 0x149c <DIO_vGetPinValue+0x104>
    149a:	04 c0       	rjmp	.+8      	; 0x14a4 <DIO_vGetPinValue+0x10c>
			 break;
	 }
}
    149c:	4b 81       	ldd	r20, Y+3	; 0x03
    149e:	5c 81       	ldd	r21, Y+4	; 0x04
    14a0:	58 87       	std	Y+8, r21	; 0x08
    14a2:	4f 83       	std	Y+7, r20	; 0x07
    14a4:	8f 81       	ldd	r24, Y+7	; 0x07
    14a6:	98 85       	ldd	r25, Y+8	; 0x08
    14a8:	28 96       	adiw	r28, 0x08	; 8
    14aa:	0f b6       	in	r0, 0x3f	; 63
    14ac:	f8 94       	cli
    14ae:	de bf       	out	0x3e, r29	; 62
    14b0:	0f be       	out	0x3f, r0	; 63
    14b2:	cd bf       	out	0x3d, r28	; 61
    14b4:	cf 91       	pop	r28
    14b6:	df 91       	pop	r29
    14b8:	08 95       	ret

000014ba <DIO_vEnsblePullUpResistor>:
void DIO_vEnsblePullUpResistor(u8 PortNumber , u8 PinNumber){
    14ba:	df 93       	push	r29
    14bc:	cf 93       	push	r28
    14be:	00 d0       	rcall	.+0      	; 0x14c0 <DIO_vEnsblePullUpResistor+0x6>
    14c0:	00 d0       	rcall	.+0      	; 0x14c2 <DIO_vEnsblePullUpResistor+0x8>
    14c2:	cd b7       	in	r28, 0x3d	; 61
    14c4:	de b7       	in	r29, 0x3e	; 62
    14c6:	89 83       	std	Y+1, r24	; 0x01
    14c8:	6a 83       	std	Y+2, r22	; 0x02
	 switch (PortNumber)
    14ca:	89 81       	ldd	r24, Y+1	; 0x01
    14cc:	28 2f       	mov	r18, r24
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	3c 83       	std	Y+4, r19	; 0x04
    14d2:	2b 83       	std	Y+3, r18	; 0x03
    14d4:	8b 81       	ldd	r24, Y+3	; 0x03
    14d6:	9c 81       	ldd	r25, Y+4	; 0x04
    14d8:	81 30       	cpi	r24, 0x01	; 1
    14da:	91 05       	cpc	r25, r1
    14dc:	49 f1       	breq	.+82     	; 0x1530 <DIO_vEnsblePullUpResistor+0x76>
    14de:	2b 81       	ldd	r18, Y+3	; 0x03
    14e0:	3c 81       	ldd	r19, Y+4	; 0x04
    14e2:	22 30       	cpi	r18, 0x02	; 2
    14e4:	31 05       	cpc	r19, r1
    14e6:	2c f4       	brge	.+10     	; 0x14f2 <DIO_vEnsblePullUpResistor+0x38>
    14e8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ea:	9c 81       	ldd	r25, Y+4	; 0x04
    14ec:	00 97       	sbiw	r24, 0x00	; 0
    14ee:	61 f0       	breq	.+24     	; 0x1508 <DIO_vEnsblePullUpResistor+0x4e>
    14f0:	5a c0       	rjmp	.+180    	; 0x15a6 <DIO_vEnsblePullUpResistor+0xec>
    14f2:	2b 81       	ldd	r18, Y+3	; 0x03
    14f4:	3c 81       	ldd	r19, Y+4	; 0x04
    14f6:	22 30       	cpi	r18, 0x02	; 2
    14f8:	31 05       	cpc	r19, r1
    14fa:	71 f1       	breq	.+92     	; 0x1558 <DIO_vEnsblePullUpResistor+0x9e>
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1500:	83 30       	cpi	r24, 0x03	; 3
    1502:	91 05       	cpc	r25, r1
    1504:	e9 f1       	breq	.+122    	; 0x1580 <DIO_vEnsblePullUpResistor+0xc6>
    1506:	4f c0       	rjmp	.+158    	; 0x15a6 <DIO_vEnsblePullUpResistor+0xec>
	 {
	 case DIO_PORTA:

			 Set_bits(PORTA,PinNumber);
    1508:	ab e3       	ldi	r26, 0x3B	; 59
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	eb e3       	ldi	r30, 0x3B	; 59
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	48 2f       	mov	r20, r24
    1514:	8a 81       	ldd	r24, Y+2	; 0x02
    1516:	28 2f       	mov	r18, r24
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	81 e0       	ldi	r24, 0x01	; 1
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	02 2e       	mov	r0, r18
    1520:	02 c0       	rjmp	.+4      	; 0x1526 <DIO_vEnsblePullUpResistor+0x6c>
    1522:	88 0f       	add	r24, r24
    1524:	99 1f       	adc	r25, r25
    1526:	0a 94       	dec	r0
    1528:	e2 f7       	brpl	.-8      	; 0x1522 <DIO_vEnsblePullUpResistor+0x68>
    152a:	84 2b       	or	r24, r20
    152c:	8c 93       	st	X, r24
    152e:	3b c0       	rjmp	.+118    	; 0x15a6 <DIO_vEnsblePullUpResistor+0xec>
		 break;
	 case DIO_PORTB:
			 Set_bits(PORTB,PinNumber);
    1530:	a8 e3       	ldi	r26, 0x38	; 56
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	e8 e3       	ldi	r30, 0x38	; 56
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	48 2f       	mov	r20, r24
    153c:	8a 81       	ldd	r24, Y+2	; 0x02
    153e:	28 2f       	mov	r18, r24
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	02 2e       	mov	r0, r18
    1548:	02 c0       	rjmp	.+4      	; 0x154e <DIO_vEnsblePullUpResistor+0x94>
    154a:	88 0f       	add	r24, r24
    154c:	99 1f       	adc	r25, r25
    154e:	0a 94       	dec	r0
    1550:	e2 f7       	brpl	.-8      	; 0x154a <DIO_vEnsblePullUpResistor+0x90>
    1552:	84 2b       	or	r24, r20
    1554:	8c 93       	st	X, r24
    1556:	27 c0       	rjmp	.+78     	; 0x15a6 <DIO_vEnsblePullUpResistor+0xec>
		 break;
	 case DIO_PORTC:
			 Set_bits(PORTC,PinNumber);
    1558:	a5 e3       	ldi	r26, 0x35	; 53
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	e5 e3       	ldi	r30, 0x35	; 53
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	48 2f       	mov	r20, r24
    1564:	8a 81       	ldd	r24, Y+2	; 0x02
    1566:	28 2f       	mov	r18, r24
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	02 2e       	mov	r0, r18
    1570:	02 c0       	rjmp	.+4      	; 0x1576 <DIO_vEnsblePullUpResistor+0xbc>
    1572:	88 0f       	add	r24, r24
    1574:	99 1f       	adc	r25, r25
    1576:	0a 94       	dec	r0
    1578:	e2 f7       	brpl	.-8      	; 0x1572 <DIO_vEnsblePullUpResistor+0xb8>
    157a:	84 2b       	or	r24, r20
    157c:	8c 93       	st	X, r24
    157e:	13 c0       	rjmp	.+38     	; 0x15a6 <DIO_vEnsblePullUpResistor+0xec>
		 break;
	 case DIO_PORTD:
			 Set_bits(PORTD,PinNumber);
    1580:	a2 e3       	ldi	r26, 0x32	; 50
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	e2 e3       	ldi	r30, 0x32	; 50
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	48 2f       	mov	r20, r24
    158c:	8a 81       	ldd	r24, Y+2	; 0x02
    158e:	28 2f       	mov	r18, r24
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	02 2e       	mov	r0, r18
    1598:	02 c0       	rjmp	.+4      	; 0x159e <DIO_vEnsblePullUpResistor+0xe4>
    159a:	88 0f       	add	r24, r24
    159c:	99 1f       	adc	r25, r25
    159e:	0a 94       	dec	r0
    15a0:	e2 f7       	brpl	.-8      	; 0x159a <DIO_vEnsblePullUpResistor+0xe0>
    15a2:	84 2b       	or	r24, r20
    15a4:	8c 93       	st	X, r24
		 break;
	 }
}
    15a6:	0f 90       	pop	r0
    15a8:	0f 90       	pop	r0
    15aa:	0f 90       	pop	r0
    15ac:	0f 90       	pop	r0
    15ae:	cf 91       	pop	r28
    15b0:	df 91       	pop	r29
    15b2:	08 95       	ret

000015b4 <DIO_vTogelBit>:
void DIO_vTogelBit(u8 PortNumber , u8 PinNumber){
    15b4:	df 93       	push	r29
    15b6:	cf 93       	push	r28
    15b8:	00 d0       	rcall	.+0      	; 0x15ba <DIO_vTogelBit+0x6>
    15ba:	00 d0       	rcall	.+0      	; 0x15bc <DIO_vTogelBit+0x8>
    15bc:	cd b7       	in	r28, 0x3d	; 61
    15be:	de b7       	in	r29, 0x3e	; 62
    15c0:	89 83       	std	Y+1, r24	; 0x01
    15c2:	6a 83       	std	Y+2, r22	; 0x02
	 switch (PortNumber)
    15c4:	89 81       	ldd	r24, Y+1	; 0x01
    15c6:	28 2f       	mov	r18, r24
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	3c 83       	std	Y+4, r19	; 0x04
    15cc:	2b 83       	std	Y+3, r18	; 0x03
    15ce:	8b 81       	ldd	r24, Y+3	; 0x03
    15d0:	9c 81       	ldd	r25, Y+4	; 0x04
    15d2:	81 30       	cpi	r24, 0x01	; 1
    15d4:	91 05       	cpc	r25, r1
    15d6:	49 f1       	breq	.+82     	; 0x162a <DIO_vTogelBit+0x76>
    15d8:	2b 81       	ldd	r18, Y+3	; 0x03
    15da:	3c 81       	ldd	r19, Y+4	; 0x04
    15dc:	22 30       	cpi	r18, 0x02	; 2
    15de:	31 05       	cpc	r19, r1
    15e0:	2c f4       	brge	.+10     	; 0x15ec <DIO_vTogelBit+0x38>
    15e2:	8b 81       	ldd	r24, Y+3	; 0x03
    15e4:	9c 81       	ldd	r25, Y+4	; 0x04
    15e6:	00 97       	sbiw	r24, 0x00	; 0
    15e8:	61 f0       	breq	.+24     	; 0x1602 <DIO_vTogelBit+0x4e>
    15ea:	5a c0       	rjmp	.+180    	; 0x16a0 <DIO_vTogelBit+0xec>
    15ec:	2b 81       	ldd	r18, Y+3	; 0x03
    15ee:	3c 81       	ldd	r19, Y+4	; 0x04
    15f0:	22 30       	cpi	r18, 0x02	; 2
    15f2:	31 05       	cpc	r19, r1
    15f4:	71 f1       	breq	.+92     	; 0x1652 <DIO_vTogelBit+0x9e>
    15f6:	8b 81       	ldd	r24, Y+3	; 0x03
    15f8:	9c 81       	ldd	r25, Y+4	; 0x04
    15fa:	83 30       	cpi	r24, 0x03	; 3
    15fc:	91 05       	cpc	r25, r1
    15fe:	e9 f1       	breq	.+122    	; 0x167a <DIO_vTogelBit+0xc6>
    1600:	4f c0       	rjmp	.+158    	; 0x16a0 <DIO_vTogelBit+0xec>
	 {
	 case DIO_PORTA:

		 Toggel_bits(PORTA,PinNumber);
    1602:	ab e3       	ldi	r26, 0x3B	; 59
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	eb e3       	ldi	r30, 0x3B	; 59
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z
    160c:	48 2f       	mov	r20, r24
    160e:	8a 81       	ldd	r24, Y+2	; 0x02
    1610:	28 2f       	mov	r18, r24
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	02 2e       	mov	r0, r18
    161a:	02 c0       	rjmp	.+4      	; 0x1620 <DIO_vTogelBit+0x6c>
    161c:	88 0f       	add	r24, r24
    161e:	99 1f       	adc	r25, r25
    1620:	0a 94       	dec	r0
    1622:	e2 f7       	brpl	.-8      	; 0x161c <DIO_vTogelBit+0x68>
    1624:	84 27       	eor	r24, r20
    1626:	8c 93       	st	X, r24
    1628:	3b c0       	rjmp	.+118    	; 0x16a0 <DIO_vTogelBit+0xec>
		 break;
	 case DIO_PORTB:
		 Toggel_bits(PORTB,PinNumber);
    162a:	a8 e3       	ldi	r26, 0x38	; 56
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	e8 e3       	ldi	r30, 0x38	; 56
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	48 2f       	mov	r20, r24
    1636:	8a 81       	ldd	r24, Y+2	; 0x02
    1638:	28 2f       	mov	r18, r24
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	02 2e       	mov	r0, r18
    1642:	02 c0       	rjmp	.+4      	; 0x1648 <DIO_vTogelBit+0x94>
    1644:	88 0f       	add	r24, r24
    1646:	99 1f       	adc	r25, r25
    1648:	0a 94       	dec	r0
    164a:	e2 f7       	brpl	.-8      	; 0x1644 <DIO_vTogelBit+0x90>
    164c:	84 27       	eor	r24, r20
    164e:	8c 93       	st	X, r24
    1650:	27 c0       	rjmp	.+78     	; 0x16a0 <DIO_vTogelBit+0xec>
		 break;
	 case DIO_PORTC:
		 Toggel_bits(PORTC,PinNumber);
    1652:	a5 e3       	ldi	r26, 0x35	; 53
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	e5 e3       	ldi	r30, 0x35	; 53
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	48 2f       	mov	r20, r24
    165e:	8a 81       	ldd	r24, Y+2	; 0x02
    1660:	28 2f       	mov	r18, r24
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	02 2e       	mov	r0, r18
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <DIO_vTogelBit+0xbc>
    166c:	88 0f       	add	r24, r24
    166e:	99 1f       	adc	r25, r25
    1670:	0a 94       	dec	r0
    1672:	e2 f7       	brpl	.-8      	; 0x166c <DIO_vTogelBit+0xb8>
    1674:	84 27       	eor	r24, r20
    1676:	8c 93       	st	X, r24
    1678:	13 c0       	rjmp	.+38     	; 0x16a0 <DIO_vTogelBit+0xec>
		 break;
	 case DIO_PORTD:
		 Toggel_bits(PORTD,PinNumber);
    167a:	a2 e3       	ldi	r26, 0x32	; 50
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	e2 e3       	ldi	r30, 0x32	; 50
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	48 2f       	mov	r20, r24
    1686:	8a 81       	ldd	r24, Y+2	; 0x02
    1688:	28 2f       	mov	r18, r24
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	02 2e       	mov	r0, r18
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <DIO_vTogelBit+0xe4>
    1694:	88 0f       	add	r24, r24
    1696:	99 1f       	adc	r25, r25
    1698:	0a 94       	dec	r0
    169a:	e2 f7       	brpl	.-8      	; 0x1694 <DIO_vTogelBit+0xe0>
    169c:	84 27       	eor	r24, r20
    169e:	8c 93       	st	X, r24
		 break;
	 }
}
    16a0:	0f 90       	pop	r0
    16a2:	0f 90       	pop	r0
    16a4:	0f 90       	pop	r0
    16a6:	0f 90       	pop	r0
    16a8:	cf 91       	pop	r28
    16aa:	df 91       	pop	r29
    16ac:	08 95       	ret

000016ae <LCD_vDataPort>:
#include <avr/delay.h>
#include "DIO_int.h"
#include "Bit_modification.h"

void LCD_vDataPort(void)
{
    16ae:	df 93       	push	r29
    16b0:	cf 93       	push	r28
    16b2:	cd b7       	in	r28, 0x3d	; 61
    16b4:	de b7       	in	r29, 0x3e	; 62

	DIO_vSerPinDirection(LCD_DATA_PORT,LCD_D0,DIO_OUTPUT);
    16b6:	82 e0       	ldi	r24, 0x02	; 2
    16b8:	60 e0       	ldi	r22, 0x00	; 0
    16ba:	41 e0       	ldi	r20, 0x01	; 1
    16bc:	0e 94 06 08 	call	0x100c	; 0x100c <DIO_vSerPinDirection>
	DIO_vSerPinDirection(LCD_DATA_PORT,LCD_D1,DIO_OUTPUT);
    16c0:	82 e0       	ldi	r24, 0x02	; 2
    16c2:	61 e0       	ldi	r22, 0x01	; 1
    16c4:	41 e0       	ldi	r20, 0x01	; 1
    16c6:	0e 94 06 08 	call	0x100c	; 0x100c <DIO_vSerPinDirection>
	DIO_vSerPinDirection(LCD_DATA_PORT,LCD_D2,DIO_OUTPUT);
    16ca:	82 e0       	ldi	r24, 0x02	; 2
    16cc:	62 e0       	ldi	r22, 0x02	; 2
    16ce:	41 e0       	ldi	r20, 0x01	; 1
    16d0:	0e 94 06 08 	call	0x100c	; 0x100c <DIO_vSerPinDirection>
	DIO_vSerPinDirection(LCD_DATA_PORT,LCD_D3,DIO_OUTPUT);
    16d4:	82 e0       	ldi	r24, 0x02	; 2
    16d6:	63 e0       	ldi	r22, 0x03	; 3
    16d8:	41 e0       	ldi	r20, 0x01	; 1
    16da:	0e 94 06 08 	call	0x100c	; 0x100c <DIO_vSerPinDirection>
	DIO_vSerPinDirection(LCD_DATA_PORT,LCD_D4,DIO_OUTPUT);
    16de:	82 e0       	ldi	r24, 0x02	; 2
    16e0:	64 e0       	ldi	r22, 0x04	; 4
    16e2:	41 e0       	ldi	r20, 0x01	; 1
    16e4:	0e 94 06 08 	call	0x100c	; 0x100c <DIO_vSerPinDirection>
	DIO_vSerPinDirection(LCD_DATA_PORT,LCD_D5,DIO_OUTPUT);
    16e8:	82 e0       	ldi	r24, 0x02	; 2
    16ea:	65 e0       	ldi	r22, 0x05	; 5
    16ec:	41 e0       	ldi	r20, 0x01	; 1
    16ee:	0e 94 06 08 	call	0x100c	; 0x100c <DIO_vSerPinDirection>
	DIO_vSerPinDirection(LCD_DATA_PORT,LCD_D6,DIO_OUTPUT);
    16f2:	82 e0       	ldi	r24, 0x02	; 2
    16f4:	66 e0       	ldi	r22, 0x06	; 6
    16f6:	41 e0       	ldi	r20, 0x01	; 1
    16f8:	0e 94 06 08 	call	0x100c	; 0x100c <DIO_vSerPinDirection>
	DIO_vSerPinDirection(LCD_DATA_PORT,LCD_D7,DIO_OUTPUT);
    16fc:	82 e0       	ldi	r24, 0x02	; 2
    16fe:	67 e0       	ldi	r22, 0x07	; 7
    1700:	41 e0       	ldi	r20, 0x01	; 1
    1702:	0e 94 06 08 	call	0x100c	; 0x100c <DIO_vSerPinDirection>


}
    1706:	cf 91       	pop	r28
    1708:	df 91       	pop	r29
    170a:	08 95       	ret

0000170c <LCD_vControlPort>:
void LCD_vControlPort(void)
{
    170c:	df 93       	push	r29
    170e:	cf 93       	push	r28
    1710:	cd b7       	in	r28, 0x3d	; 61
    1712:	de b7       	in	r29, 0x3e	; 62

	DIO_vSerPinDirection(LCD_CONTROL_PORT,LCD_RS, DIO_HIGH);
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	63 e0       	ldi	r22, 0x03	; 3
    1718:	41 e0       	ldi	r20, 0x01	; 1
    171a:	0e 94 06 08 	call	0x100c	; 0x100c <DIO_vSerPinDirection>
	DIO_vSerPinDirection(LCD_CONTROL_PORT,LCD_RW, DIO_HIGH);
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	64 e0       	ldi	r22, 0x04	; 4
    1722:	41 e0       	ldi	r20, 0x01	; 1
    1724:	0e 94 06 08 	call	0x100c	; 0x100c <DIO_vSerPinDirection>
	DIO_vSerPinDirection(LCD_CONTROL_PORT,LCD_ENABLE, DIO_HIGH);
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	65 e0       	ldi	r22, 0x05	; 5
    172c:	41 e0       	ldi	r20, 0x01	; 1
    172e:	0e 94 06 08 	call	0x100c	; 0x100c <DIO_vSerPinDirection>

}
    1732:	cf 91       	pop	r28
    1734:	df 91       	pop	r29
    1736:	08 95       	ret

00001738 <LCD_vPosition>:


void LCD_vPosition(u8 position)
{
    1738:	df 93       	push	r29
    173a:	cf 93       	push	r28
    173c:	cd b7       	in	r28, 0x3d	; 61
    173e:	de b7       	in	r29, 0x3e	; 62
    1740:	2f 97       	sbiw	r28, 0x0f	; 15
    1742:	0f b6       	in	r0, 0x3f	; 63
    1744:	f8 94       	cli
    1746:	de bf       	out	0x3e, r29	; 62
    1748:	0f be       	out	0x3f, r0	; 63
    174a:	cd bf       	out	0x3d, r28	; 61
    174c:	8f 87       	std	Y+15, r24	; 0x0f
	if (position > 16)
    174e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1750:	81 31       	cpi	r24, 0x11	; 17
    1752:	28 f0       	brcs	.+10     	; 0x175e <LCD_vPosition+0x26>
		LCD_vWriteCommand((175 +position));
    1754:	8f 85       	ldd	r24, Y+15	; 0x0f
    1756:	81 55       	subi	r24, 0x51	; 81
    1758:	0e 94 cc 0c 	call	0x1998	; 0x1998 <LCD_vWriteCommand>
    175c:	04 c0       	rjmp	.+8      	; 0x1766 <LCD_vPosition+0x2e>
	else
		LCD_vWriteCommand((127+position));
    175e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1760:	81 58       	subi	r24, 0x81	; 129
    1762:	0e 94 cc 0c 	call	0x1998	; 0x1998 <LCD_vWriteCommand>
    1766:	80 e0       	ldi	r24, 0x00	; 0
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	a0 e2       	ldi	r26, 0x20	; 32
    176c:	b1 e4       	ldi	r27, 0x41	; 65
    176e:	8b 87       	std	Y+11, r24	; 0x0b
    1770:	9c 87       	std	Y+12, r25	; 0x0c
    1772:	ad 87       	std	Y+13, r26	; 0x0d
    1774:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1776:	6b 85       	ldd	r22, Y+11	; 0x0b
    1778:	7c 85       	ldd	r23, Y+12	; 0x0c
    177a:	8d 85       	ldd	r24, Y+13	; 0x0d
    177c:	9e 85       	ldd	r25, Y+14	; 0x0e
    177e:	20 e0       	ldi	r18, 0x00	; 0
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	4a e7       	ldi	r20, 0x7A	; 122
    1784:	53 e4       	ldi	r21, 0x43	; 67
    1786:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    178a:	dc 01       	movw	r26, r24
    178c:	cb 01       	movw	r24, r22
    178e:	8f 83       	std	Y+7, r24	; 0x07
    1790:	98 87       	std	Y+8, r25	; 0x08
    1792:	a9 87       	std	Y+9, r26	; 0x09
    1794:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1796:	6f 81       	ldd	r22, Y+7	; 0x07
    1798:	78 85       	ldd	r23, Y+8	; 0x08
    179a:	89 85       	ldd	r24, Y+9	; 0x09
    179c:	9a 85       	ldd	r25, Y+10	; 0x0a
    179e:	20 e0       	ldi	r18, 0x00	; 0
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	40 e8       	ldi	r20, 0x80	; 128
    17a4:	5f e3       	ldi	r21, 0x3F	; 63
    17a6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17aa:	88 23       	and	r24, r24
    17ac:	2c f4       	brge	.+10     	; 0x17b8 <LCD_vPosition+0x80>
		__ticks = 1;
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	9e 83       	std	Y+6, r25	; 0x06
    17b4:	8d 83       	std	Y+5, r24	; 0x05
    17b6:	3f c0       	rjmp	.+126    	; 0x1836 <LCD_vPosition+0xfe>
	else if (__tmp > 65535)
    17b8:	6f 81       	ldd	r22, Y+7	; 0x07
    17ba:	78 85       	ldd	r23, Y+8	; 0x08
    17bc:	89 85       	ldd	r24, Y+9	; 0x09
    17be:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c0:	20 e0       	ldi	r18, 0x00	; 0
    17c2:	3f ef       	ldi	r19, 0xFF	; 255
    17c4:	4f e7       	ldi	r20, 0x7F	; 127
    17c6:	57 e4       	ldi	r21, 0x47	; 71
    17c8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    17cc:	18 16       	cp	r1, r24
    17ce:	4c f5       	brge	.+82     	; 0x1822 <LCD_vPosition+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    17d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    17d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    17d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    17d8:	20 e0       	ldi	r18, 0x00	; 0
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	40 e2       	ldi	r20, 0x20	; 32
    17de:	51 e4       	ldi	r21, 0x41	; 65
    17e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17e4:	dc 01       	movw	r26, r24
    17e6:	cb 01       	movw	r24, r22
    17e8:	bc 01       	movw	r22, r24
    17ea:	cd 01       	movw	r24, r26
    17ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17f0:	dc 01       	movw	r26, r24
    17f2:	cb 01       	movw	r24, r22
    17f4:	9e 83       	std	Y+6, r25	; 0x06
    17f6:	8d 83       	std	Y+5, r24	; 0x05
    17f8:	0f c0       	rjmp	.+30     	; 0x1818 <LCD_vPosition+0xe0>
    17fa:	89 e1       	ldi	r24, 0x19	; 25
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	9c 83       	std	Y+4, r25	; 0x04
    1800:	8b 83       	std	Y+3, r24	; 0x03
    1802:	8b 81       	ldd	r24, Y+3	; 0x03
    1804:	9c 81       	ldd	r25, Y+4	; 0x04
    1806:	01 97       	sbiw	r24, 0x01	; 1
    1808:	f1 f7       	brne	.-4      	; 0x1806 <LCD_vPosition+0xce>
    180a:	9c 83       	std	Y+4, r25	; 0x04
    180c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    180e:	8d 81       	ldd	r24, Y+5	; 0x05
    1810:	9e 81       	ldd	r25, Y+6	; 0x06
    1812:	01 97       	sbiw	r24, 0x01	; 1
    1814:	9e 83       	std	Y+6, r25	; 0x06
    1816:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1818:	8d 81       	ldd	r24, Y+5	; 0x05
    181a:	9e 81       	ldd	r25, Y+6	; 0x06
    181c:	00 97       	sbiw	r24, 0x00	; 0
    181e:	69 f7       	brne	.-38     	; 0x17fa <LCD_vPosition+0xc2>
    1820:	14 c0       	rjmp	.+40     	; 0x184a <LCD_vPosition+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1822:	6f 81       	ldd	r22, Y+7	; 0x07
    1824:	78 85       	ldd	r23, Y+8	; 0x08
    1826:	89 85       	ldd	r24, Y+9	; 0x09
    1828:	9a 85       	ldd	r25, Y+10	; 0x0a
    182a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    182e:	dc 01       	movw	r26, r24
    1830:	cb 01       	movw	r24, r22
    1832:	9e 83       	std	Y+6, r25	; 0x06
    1834:	8d 83       	std	Y+5, r24	; 0x05
    1836:	8d 81       	ldd	r24, Y+5	; 0x05
    1838:	9e 81       	ldd	r25, Y+6	; 0x06
    183a:	9a 83       	std	Y+2, r25	; 0x02
    183c:	89 83       	std	Y+1, r24	; 0x01
    183e:	89 81       	ldd	r24, Y+1	; 0x01
    1840:	9a 81       	ldd	r25, Y+2	; 0x02
    1842:	01 97       	sbiw	r24, 0x01	; 1
    1844:	f1 f7       	brne	.-4      	; 0x1842 <LCD_vPosition+0x10a>
    1846:	9a 83       	std	Y+2, r25	; 0x02
    1848:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    184a:	2f 96       	adiw	r28, 0x0f	; 15
    184c:	0f b6       	in	r0, 0x3f	; 63
    184e:	f8 94       	cli
    1850:	de bf       	out	0x3e, r29	; 62
    1852:	0f be       	out	0x3f, r0	; 63
    1854:	cd bf       	out	0x3d, r28	; 61
    1856:	cf 91       	pop	r28
    1858:	df 91       	pop	r29
    185a:	08 95       	ret

0000185c <LCD_vWriteData>:



void LCD_vWriteData(u8 Data){
    185c:	df 93       	push	r29
    185e:	cf 93       	push	r28
    1860:	cd b7       	in	r28, 0x3d	; 61
    1862:	de b7       	in	r29, 0x3e	; 62
    1864:	2f 97       	sbiw	r28, 0x0f	; 15
    1866:	0f b6       	in	r0, 0x3f	; 63
    1868:	f8 94       	cli
    186a:	de bf       	out	0x3e, r29	; 62
    186c:	0f be       	out	0x3f, r0	; 63
    186e:	cd bf       	out	0x3d, r28	; 61
    1870:	8f 87       	std	Y+15, r24	; 0x0f

	// RS -> 1
    DIO_vSetPinValue(LCD_CONTROL_PORT , LCD_RS , DIO_HIGH);
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	63 e0       	ldi	r22, 0x03	; 3
    1876:	41 e0       	ldi	r20, 0x01	; 1
    1878:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <DIO_vSetPinValue>
    //RW -> 0
    DIO_vSetPinValue(LCD_CONTROL_PORT , LCD_RW , DIO_LOW);
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	64 e0       	ldi	r22, 0x04	; 4
    1880:	40 e0       	ldi	r20, 0x00	; 0
    1882:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <DIO_vSetPinValue>
    // Write  data
    PORTC = Data;
    1886:	e5 e3       	ldi	r30, 0x35	; 53
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	8f 85       	ldd	r24, Y+15	; 0x0f
    188c:	80 83       	st	Z, r24
    //E -> 1
    DIO_vSetPinValue(LCD_CONTROL_PORT , LCD_ENABLE , DIO_HIGH);
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	65 e0       	ldi	r22, 0x05	; 5
    1892:	41 e0       	ldi	r20, 0x01	; 1
    1894:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <DIO_vSetPinValue>
    1898:	80 e0       	ldi	r24, 0x00	; 0
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	a0 e2       	ldi	r26, 0x20	; 32
    189e:	b1 e4       	ldi	r27, 0x41	; 65
    18a0:	8b 87       	std	Y+11, r24	; 0x0b
    18a2:	9c 87       	std	Y+12, r25	; 0x0c
    18a4:	ad 87       	std	Y+13, r26	; 0x0d
    18a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    18aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    18ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    18ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    18b0:	20 e0       	ldi	r18, 0x00	; 0
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	4a e7       	ldi	r20, 0x7A	; 122
    18b6:	53 e4       	ldi	r21, 0x43	; 67
    18b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18bc:	dc 01       	movw	r26, r24
    18be:	cb 01       	movw	r24, r22
    18c0:	8f 83       	std	Y+7, r24	; 0x07
    18c2:	98 87       	std	Y+8, r25	; 0x08
    18c4:	a9 87       	std	Y+9, r26	; 0x09
    18c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18c8:	6f 81       	ldd	r22, Y+7	; 0x07
    18ca:	78 85       	ldd	r23, Y+8	; 0x08
    18cc:	89 85       	ldd	r24, Y+9	; 0x09
    18ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    18d0:	20 e0       	ldi	r18, 0x00	; 0
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	40 e8       	ldi	r20, 0x80	; 128
    18d6:	5f e3       	ldi	r21, 0x3F	; 63
    18d8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18dc:	88 23       	and	r24, r24
    18de:	2c f4       	brge	.+10     	; 0x18ea <LCD_vWriteData+0x8e>
		__ticks = 1;
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	9e 83       	std	Y+6, r25	; 0x06
    18e6:	8d 83       	std	Y+5, r24	; 0x05
    18e8:	3f c0       	rjmp	.+126    	; 0x1968 <LCD_vWriteData+0x10c>
	else if (__tmp > 65535)
    18ea:	6f 81       	ldd	r22, Y+7	; 0x07
    18ec:	78 85       	ldd	r23, Y+8	; 0x08
    18ee:	89 85       	ldd	r24, Y+9	; 0x09
    18f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    18f2:	20 e0       	ldi	r18, 0x00	; 0
    18f4:	3f ef       	ldi	r19, 0xFF	; 255
    18f6:	4f e7       	ldi	r20, 0x7F	; 127
    18f8:	57 e4       	ldi	r21, 0x47	; 71
    18fa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    18fe:	18 16       	cp	r1, r24
    1900:	4c f5       	brge	.+82     	; 0x1954 <LCD_vWriteData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1902:	6b 85       	ldd	r22, Y+11	; 0x0b
    1904:	7c 85       	ldd	r23, Y+12	; 0x0c
    1906:	8d 85       	ldd	r24, Y+13	; 0x0d
    1908:	9e 85       	ldd	r25, Y+14	; 0x0e
    190a:	20 e0       	ldi	r18, 0x00	; 0
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	40 e2       	ldi	r20, 0x20	; 32
    1910:	51 e4       	ldi	r21, 0x41	; 65
    1912:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1916:	dc 01       	movw	r26, r24
    1918:	cb 01       	movw	r24, r22
    191a:	bc 01       	movw	r22, r24
    191c:	cd 01       	movw	r24, r26
    191e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1922:	dc 01       	movw	r26, r24
    1924:	cb 01       	movw	r24, r22
    1926:	9e 83       	std	Y+6, r25	; 0x06
    1928:	8d 83       	std	Y+5, r24	; 0x05
    192a:	0f c0       	rjmp	.+30     	; 0x194a <LCD_vWriteData+0xee>
    192c:	89 e1       	ldi	r24, 0x19	; 25
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	9c 83       	std	Y+4, r25	; 0x04
    1932:	8b 83       	std	Y+3, r24	; 0x03
    1934:	8b 81       	ldd	r24, Y+3	; 0x03
    1936:	9c 81       	ldd	r25, Y+4	; 0x04
    1938:	01 97       	sbiw	r24, 0x01	; 1
    193a:	f1 f7       	brne	.-4      	; 0x1938 <LCD_vWriteData+0xdc>
    193c:	9c 83       	std	Y+4, r25	; 0x04
    193e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1940:	8d 81       	ldd	r24, Y+5	; 0x05
    1942:	9e 81       	ldd	r25, Y+6	; 0x06
    1944:	01 97       	sbiw	r24, 0x01	; 1
    1946:	9e 83       	std	Y+6, r25	; 0x06
    1948:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    194a:	8d 81       	ldd	r24, Y+5	; 0x05
    194c:	9e 81       	ldd	r25, Y+6	; 0x06
    194e:	00 97       	sbiw	r24, 0x00	; 0
    1950:	69 f7       	brne	.-38     	; 0x192c <LCD_vWriteData+0xd0>
    1952:	14 c0       	rjmp	.+40     	; 0x197c <LCD_vWriteData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1954:	6f 81       	ldd	r22, Y+7	; 0x07
    1956:	78 85       	ldd	r23, Y+8	; 0x08
    1958:	89 85       	ldd	r24, Y+9	; 0x09
    195a:	9a 85       	ldd	r25, Y+10	; 0x0a
    195c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1960:	dc 01       	movw	r26, r24
    1962:	cb 01       	movw	r24, r22
    1964:	9e 83       	std	Y+6, r25	; 0x06
    1966:	8d 83       	std	Y+5, r24	; 0x05
    1968:	8d 81       	ldd	r24, Y+5	; 0x05
    196a:	9e 81       	ldd	r25, Y+6	; 0x06
    196c:	9a 83       	std	Y+2, r25	; 0x02
    196e:	89 83       	std	Y+1, r24	; 0x01
    1970:	89 81       	ldd	r24, Y+1	; 0x01
    1972:	9a 81       	ldd	r25, Y+2	; 0x02
    1974:	01 97       	sbiw	r24, 0x01	; 1
    1976:	f1 f7       	brne	.-4      	; 0x1974 <LCD_vWriteData+0x118>
    1978:	9a 83       	std	Y+2, r25	; 0x02
    197a:	89 83       	std	Y+1, r24	; 0x01

    _delay_ms(10);

    //E -> 0

    DIO_vSetPinValue(LCD_CONTROL_PORT , LCD_ENABLE , DIO_LOW);
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	65 e0       	ldi	r22, 0x05	; 5
    1980:	40 e0       	ldi	r20, 0x00	; 0
    1982:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <DIO_vSetPinValue>


}
    1986:	2f 96       	adiw	r28, 0x0f	; 15
    1988:	0f b6       	in	r0, 0x3f	; 63
    198a:	f8 94       	cli
    198c:	de bf       	out	0x3e, r29	; 62
    198e:	0f be       	out	0x3f, r0	; 63
    1990:	cd bf       	out	0x3d, r28	; 61
    1992:	cf 91       	pop	r28
    1994:	df 91       	pop	r29
    1996:	08 95       	ret

00001998 <LCD_vWriteCommand>:

void LCD_vWriteCommand(u8 Command){
    1998:	df 93       	push	r29
    199a:	cf 93       	push	r28
    199c:	cd b7       	in	r28, 0x3d	; 61
    199e:	de b7       	in	r29, 0x3e	; 62
    19a0:	2f 97       	sbiw	r28, 0x0f	; 15
    19a2:	0f b6       	in	r0, 0x3f	; 63
    19a4:	f8 94       	cli
    19a6:	de bf       	out	0x3e, r29	; 62
    19a8:	0f be       	out	0x3f, r0	; 63
    19aa:	cd bf       	out	0x3d, r28	; 61
    19ac:	8f 87       	std	Y+15, r24	; 0x0f

	// RS -> 0
    DIO_vSetPinValue(LCD_CONTROL_PORT , LCD_RS , DIO_LOW);
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	63 e0       	ldi	r22, 0x03	; 3
    19b2:	40 e0       	ldi	r20, 0x00	; 0
    19b4:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <DIO_vSetPinValue>
    //RW -> 0
    DIO_vSetPinValue(LCD_CONTROL_PORT , LCD_RW , DIO_LOW);
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	64 e0       	ldi	r22, 0x04	; 4
    19bc:	40 e0       	ldi	r20, 0x00	; 0
    19be:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <DIO_vSetPinValue>
    // Write  data

    PORTC = Command;
    19c2:	e5 e3       	ldi	r30, 0x35	; 53
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    19c8:	80 83       	st	Z, r24

    //E -> 1
    DIO_vSetPinValue(LCD_CONTROL_PORT , LCD_ENABLE , DIO_HIGH);
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	65 e0       	ldi	r22, 0x05	; 5
    19ce:	41 e0       	ldi	r20, 0x01	; 1
    19d0:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <DIO_vSetPinValue>
    19d4:	80 e0       	ldi	r24, 0x00	; 0
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	a0 e2       	ldi	r26, 0x20	; 32
    19da:	b1 e4       	ldi	r27, 0x41	; 65
    19dc:	8b 87       	std	Y+11, r24	; 0x0b
    19de:	9c 87       	std	Y+12, r25	; 0x0c
    19e0:	ad 87       	std	Y+13, r26	; 0x0d
    19e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    19e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    19e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	4a e7       	ldi	r20, 0x7A	; 122
    19f2:	53 e4       	ldi	r21, 0x43	; 67
    19f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19f8:	dc 01       	movw	r26, r24
    19fa:	cb 01       	movw	r24, r22
    19fc:	8f 83       	std	Y+7, r24	; 0x07
    19fe:	98 87       	std	Y+8, r25	; 0x08
    1a00:	a9 87       	std	Y+9, r26	; 0x09
    1a02:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a04:	6f 81       	ldd	r22, Y+7	; 0x07
    1a06:	78 85       	ldd	r23, Y+8	; 0x08
    1a08:	89 85       	ldd	r24, Y+9	; 0x09
    1a0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a0c:	20 e0       	ldi	r18, 0x00	; 0
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	40 e8       	ldi	r20, 0x80	; 128
    1a12:	5f e3       	ldi	r21, 0x3F	; 63
    1a14:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a18:	88 23       	and	r24, r24
    1a1a:	2c f4       	brge	.+10     	; 0x1a26 <LCD_vWriteCommand+0x8e>
		__ticks = 1;
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	9e 83       	std	Y+6, r25	; 0x06
    1a22:	8d 83       	std	Y+5, r24	; 0x05
    1a24:	3f c0       	rjmp	.+126    	; 0x1aa4 <LCD_vWriteCommand+0x10c>
	else if (__tmp > 65535)
    1a26:	6f 81       	ldd	r22, Y+7	; 0x07
    1a28:	78 85       	ldd	r23, Y+8	; 0x08
    1a2a:	89 85       	ldd	r24, Y+9	; 0x09
    1a2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	3f ef       	ldi	r19, 0xFF	; 255
    1a32:	4f e7       	ldi	r20, 0x7F	; 127
    1a34:	57 e4       	ldi	r21, 0x47	; 71
    1a36:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a3a:	18 16       	cp	r1, r24
    1a3c:	4c f5       	brge	.+82     	; 0x1a90 <LCD_vWriteCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a40:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a42:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a44:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	40 e2       	ldi	r20, 0x20	; 32
    1a4c:	51 e4       	ldi	r21, 0x41	; 65
    1a4e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a52:	dc 01       	movw	r26, r24
    1a54:	cb 01       	movw	r24, r22
    1a56:	bc 01       	movw	r22, r24
    1a58:	cd 01       	movw	r24, r26
    1a5a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a5e:	dc 01       	movw	r26, r24
    1a60:	cb 01       	movw	r24, r22
    1a62:	9e 83       	std	Y+6, r25	; 0x06
    1a64:	8d 83       	std	Y+5, r24	; 0x05
    1a66:	0f c0       	rjmp	.+30     	; 0x1a86 <LCD_vWriteCommand+0xee>
    1a68:	89 e1       	ldi	r24, 0x19	; 25
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	9c 83       	std	Y+4, r25	; 0x04
    1a6e:	8b 83       	std	Y+3, r24	; 0x03
    1a70:	8b 81       	ldd	r24, Y+3	; 0x03
    1a72:	9c 81       	ldd	r25, Y+4	; 0x04
    1a74:	01 97       	sbiw	r24, 0x01	; 1
    1a76:	f1 f7       	brne	.-4      	; 0x1a74 <LCD_vWriteCommand+0xdc>
    1a78:	9c 83       	std	Y+4, r25	; 0x04
    1a7a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a80:	01 97       	sbiw	r24, 0x01	; 1
    1a82:	9e 83       	std	Y+6, r25	; 0x06
    1a84:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a86:	8d 81       	ldd	r24, Y+5	; 0x05
    1a88:	9e 81       	ldd	r25, Y+6	; 0x06
    1a8a:	00 97       	sbiw	r24, 0x00	; 0
    1a8c:	69 f7       	brne	.-38     	; 0x1a68 <LCD_vWriteCommand+0xd0>
    1a8e:	14 c0       	rjmp	.+40     	; 0x1ab8 <LCD_vWriteCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a90:	6f 81       	ldd	r22, Y+7	; 0x07
    1a92:	78 85       	ldd	r23, Y+8	; 0x08
    1a94:	89 85       	ldd	r24, Y+9	; 0x09
    1a96:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a98:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	9e 83       	std	Y+6, r25	; 0x06
    1aa2:	8d 83       	std	Y+5, r24	; 0x05
    1aa4:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa6:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa8:	9a 83       	std	Y+2, r25	; 0x02
    1aaa:	89 83       	std	Y+1, r24	; 0x01
    1aac:	89 81       	ldd	r24, Y+1	; 0x01
    1aae:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab0:	01 97       	sbiw	r24, 0x01	; 1
    1ab2:	f1 f7       	brne	.-4      	; 0x1ab0 <LCD_vWriteCommand+0x118>
    1ab4:	9a 83       	std	Y+2, r25	; 0x02
    1ab6:	89 83       	std	Y+1, r24	; 0x01

    _delay_ms(10);

    //E -> 0

    DIO_vSetPinValue(LCD_CONTROL_PORT , LCD_ENABLE , DIO_LOW);
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	65 e0       	ldi	r22, 0x05	; 5
    1abc:	40 e0       	ldi	r20, 0x00	; 0
    1abe:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <DIO_vSetPinValue>


}
    1ac2:	2f 96       	adiw	r28, 0x0f	; 15
    1ac4:	0f b6       	in	r0, 0x3f	; 63
    1ac6:	f8 94       	cli
    1ac8:	de bf       	out	0x3e, r29	; 62
    1aca:	0f be       	out	0x3f, r0	; 63
    1acc:	cd bf       	out	0x3d, r28	; 61
    1ace:	cf 91       	pop	r28
    1ad0:	df 91       	pop	r29
    1ad2:	08 95       	ret

00001ad4 <Lcd_vInitialization>:
void Lcd_vInitialization(void){
    1ad4:	df 93       	push	r29
    1ad6:	cf 93       	push	r28
    1ad8:	cd b7       	in	r28, 0x3d	; 61
    1ada:	de b7       	in	r29, 0x3e	; 62
    1adc:	e8 97       	sbiw	r28, 0x38	; 56
    1ade:	0f b6       	in	r0, 0x3f	; 63
    1ae0:	f8 94       	cli
    1ae2:	de bf       	out	0x3e, r29	; 62
    1ae4:	0f be       	out	0x3f, r0	; 63
    1ae6:	cd bf       	out	0x3d, r28	; 61
	//delay for initialized
	 LCD_vDataPort();
    1ae8:	0e 94 57 0b 	call	0x16ae	; 0x16ae <LCD_vDataPort>
	 LCD_vControlPort();
    1aec:	0e 94 86 0b 	call	0x170c	; 0x170c <LCD_vControlPort>
    1af0:	80 e0       	ldi	r24, 0x00	; 0
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	a8 ec       	ldi	r26, 0xC8	; 200
    1af6:	b2 e4       	ldi	r27, 0x42	; 66
    1af8:	8d ab       	std	Y+53, r24	; 0x35
    1afa:	9e ab       	std	Y+54, r25	; 0x36
    1afc:	af ab       	std	Y+55, r26	; 0x37
    1afe:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b00:	6d a9       	ldd	r22, Y+53	; 0x35
    1b02:	7e a9       	ldd	r23, Y+54	; 0x36
    1b04:	8f a9       	ldd	r24, Y+55	; 0x37
    1b06:	98 ad       	ldd	r25, Y+56	; 0x38
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	4a e7       	ldi	r20, 0x7A	; 122
    1b0e:	53 e4       	ldi	r21, 0x43	; 67
    1b10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	89 ab       	std	Y+49, r24	; 0x31
    1b1a:	9a ab       	std	Y+50, r25	; 0x32
    1b1c:	ab ab       	std	Y+51, r26	; 0x33
    1b1e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b20:	69 a9       	ldd	r22, Y+49	; 0x31
    1b22:	7a a9       	ldd	r23, Y+50	; 0x32
    1b24:	8b a9       	ldd	r24, Y+51	; 0x33
    1b26:	9c a9       	ldd	r25, Y+52	; 0x34
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	40 e8       	ldi	r20, 0x80	; 128
    1b2e:	5f e3       	ldi	r21, 0x3F	; 63
    1b30:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b34:	88 23       	and	r24, r24
    1b36:	2c f4       	brge	.+10     	; 0x1b42 <Lcd_vInitialization+0x6e>
		__ticks = 1;
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	98 ab       	std	Y+48, r25	; 0x30
    1b3e:	8f a7       	std	Y+47, r24	; 0x2f
    1b40:	3f c0       	rjmp	.+126    	; 0x1bc0 <Lcd_vInitialization+0xec>
	else if (__tmp > 65535)
    1b42:	69 a9       	ldd	r22, Y+49	; 0x31
    1b44:	7a a9       	ldd	r23, Y+50	; 0x32
    1b46:	8b a9       	ldd	r24, Y+51	; 0x33
    1b48:	9c a9       	ldd	r25, Y+52	; 0x34
    1b4a:	20 e0       	ldi	r18, 0x00	; 0
    1b4c:	3f ef       	ldi	r19, 0xFF	; 255
    1b4e:	4f e7       	ldi	r20, 0x7F	; 127
    1b50:	57 e4       	ldi	r21, 0x47	; 71
    1b52:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b56:	18 16       	cp	r1, r24
    1b58:	4c f5       	brge	.+82     	; 0x1bac <Lcd_vInitialization+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b5a:	6d a9       	ldd	r22, Y+53	; 0x35
    1b5c:	7e a9       	ldd	r23, Y+54	; 0x36
    1b5e:	8f a9       	ldd	r24, Y+55	; 0x37
    1b60:	98 ad       	ldd	r25, Y+56	; 0x38
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	40 e2       	ldi	r20, 0x20	; 32
    1b68:	51 e4       	ldi	r21, 0x41	; 65
    1b6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b6e:	dc 01       	movw	r26, r24
    1b70:	cb 01       	movw	r24, r22
    1b72:	bc 01       	movw	r22, r24
    1b74:	cd 01       	movw	r24, r26
    1b76:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	98 ab       	std	Y+48, r25	; 0x30
    1b80:	8f a7       	std	Y+47, r24	; 0x2f
    1b82:	0f c0       	rjmp	.+30     	; 0x1ba2 <Lcd_vInitialization+0xce>
    1b84:	89 e1       	ldi	r24, 0x19	; 25
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	9e a7       	std	Y+46, r25	; 0x2e
    1b8a:	8d a7       	std	Y+45, r24	; 0x2d
    1b8c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b8e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b90:	01 97       	sbiw	r24, 0x01	; 1
    1b92:	f1 f7       	brne	.-4      	; 0x1b90 <Lcd_vInitialization+0xbc>
    1b94:	9e a7       	std	Y+46, r25	; 0x2e
    1b96:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b98:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b9a:	98 a9       	ldd	r25, Y+48	; 0x30
    1b9c:	01 97       	sbiw	r24, 0x01	; 1
    1b9e:	98 ab       	std	Y+48, r25	; 0x30
    1ba0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ba4:	98 a9       	ldd	r25, Y+48	; 0x30
    1ba6:	00 97       	sbiw	r24, 0x00	; 0
    1ba8:	69 f7       	brne	.-38     	; 0x1b84 <Lcd_vInitialization+0xb0>
    1baa:	14 c0       	rjmp	.+40     	; 0x1bd4 <Lcd_vInitialization+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bac:	69 a9       	ldd	r22, Y+49	; 0x31
    1bae:	7a a9       	ldd	r23, Y+50	; 0x32
    1bb0:	8b a9       	ldd	r24, Y+51	; 0x33
    1bb2:	9c a9       	ldd	r25, Y+52	; 0x34
    1bb4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bb8:	dc 01       	movw	r26, r24
    1bba:	cb 01       	movw	r24, r22
    1bbc:	98 ab       	std	Y+48, r25	; 0x30
    1bbe:	8f a7       	std	Y+47, r24	; 0x2f
    1bc0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bc2:	98 a9       	ldd	r25, Y+48	; 0x30
    1bc4:	9c a7       	std	Y+44, r25	; 0x2c
    1bc6:	8b a7       	std	Y+43, r24	; 0x2b
    1bc8:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bca:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bcc:	01 97       	sbiw	r24, 0x01	; 1
    1bce:	f1 f7       	brne	.-4      	; 0x1bcc <Lcd_vInitialization+0xf8>
    1bd0:	9c a7       	std	Y+44, r25	; 0x2c
    1bd2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(100);
	// RS -> 0
	    DIO_vSetPinValue(LCD_CONTROL_PORT , LCD_RS , DIO_LOW);
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	63 e0       	ldi	r22, 0x03	; 3
    1bd8:	40 e0       	ldi	r20, 0x00	; 0
    1bda:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <DIO_vSetPinValue>
	    //RW -> 0
	    DIO_vSetPinValue(LCD_CONTROL_PORT , LCD_RW , DIO_LOW);
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	64 e0       	ldi	r22, 0x04	; 4
    1be2:	40 e0       	ldi	r20, 0x00	; 0
    1be4:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <DIO_vSetPinValue>

	 LCD_vWriteCommand(0b00111100);
    1be8:	8c e3       	ldi	r24, 0x3C	; 60
    1bea:	0e 94 cc 0c 	call	0x1998	; 0x1998 <LCD_vWriteCommand>
    1bee:	80 e0       	ldi	r24, 0x00	; 0
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	a0 e0       	ldi	r26, 0x00	; 0
    1bf4:	b0 e4       	ldi	r27, 0x40	; 64
    1bf6:	8f a3       	std	Y+39, r24	; 0x27
    1bf8:	98 a7       	std	Y+40, r25	; 0x28
    1bfa:	a9 a7       	std	Y+41, r26	; 0x29
    1bfc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bfe:	6f a1       	ldd	r22, Y+39	; 0x27
    1c00:	78 a5       	ldd	r23, Y+40	; 0x28
    1c02:	89 a5       	ldd	r24, Y+41	; 0x29
    1c04:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c06:	20 e0       	ldi	r18, 0x00	; 0
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	4a e7       	ldi	r20, 0x7A	; 122
    1c0c:	53 e4       	ldi	r21, 0x43	; 67
    1c0e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c12:	dc 01       	movw	r26, r24
    1c14:	cb 01       	movw	r24, r22
    1c16:	8b a3       	std	Y+35, r24	; 0x23
    1c18:	9c a3       	std	Y+36, r25	; 0x24
    1c1a:	ad a3       	std	Y+37, r26	; 0x25
    1c1c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c1e:	6b a1       	ldd	r22, Y+35	; 0x23
    1c20:	7c a1       	ldd	r23, Y+36	; 0x24
    1c22:	8d a1       	ldd	r24, Y+37	; 0x25
    1c24:	9e a1       	ldd	r25, Y+38	; 0x26
    1c26:	20 e0       	ldi	r18, 0x00	; 0
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	40 e8       	ldi	r20, 0x80	; 128
    1c2c:	5f e3       	ldi	r21, 0x3F	; 63
    1c2e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c32:	88 23       	and	r24, r24
    1c34:	2c f4       	brge	.+10     	; 0x1c40 <Lcd_vInitialization+0x16c>
		__ticks = 1;
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	9a a3       	std	Y+34, r25	; 0x22
    1c3c:	89 a3       	std	Y+33, r24	; 0x21
    1c3e:	3f c0       	rjmp	.+126    	; 0x1cbe <Lcd_vInitialization+0x1ea>
	else if (__tmp > 65535)
    1c40:	6b a1       	ldd	r22, Y+35	; 0x23
    1c42:	7c a1       	ldd	r23, Y+36	; 0x24
    1c44:	8d a1       	ldd	r24, Y+37	; 0x25
    1c46:	9e a1       	ldd	r25, Y+38	; 0x26
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	3f ef       	ldi	r19, 0xFF	; 255
    1c4c:	4f e7       	ldi	r20, 0x7F	; 127
    1c4e:	57 e4       	ldi	r21, 0x47	; 71
    1c50:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c54:	18 16       	cp	r1, r24
    1c56:	4c f5       	brge	.+82     	; 0x1caa <Lcd_vInitialization+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c58:	6f a1       	ldd	r22, Y+39	; 0x27
    1c5a:	78 a5       	ldd	r23, Y+40	; 0x28
    1c5c:	89 a5       	ldd	r24, Y+41	; 0x29
    1c5e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	40 e2       	ldi	r20, 0x20	; 32
    1c66:	51 e4       	ldi	r21, 0x41	; 65
    1c68:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	bc 01       	movw	r22, r24
    1c72:	cd 01       	movw	r24, r26
    1c74:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c78:	dc 01       	movw	r26, r24
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	9a a3       	std	Y+34, r25	; 0x22
    1c7e:	89 a3       	std	Y+33, r24	; 0x21
    1c80:	0f c0       	rjmp	.+30     	; 0x1ca0 <Lcd_vInitialization+0x1cc>
    1c82:	89 e1       	ldi	r24, 0x19	; 25
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	98 a3       	std	Y+32, r25	; 0x20
    1c88:	8f 8f       	std	Y+31, r24	; 0x1f
    1c8a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c8c:	98 a1       	ldd	r25, Y+32	; 0x20
    1c8e:	01 97       	sbiw	r24, 0x01	; 1
    1c90:	f1 f7       	brne	.-4      	; 0x1c8e <Lcd_vInitialization+0x1ba>
    1c92:	98 a3       	std	Y+32, r25	; 0x20
    1c94:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c96:	89 a1       	ldd	r24, Y+33	; 0x21
    1c98:	9a a1       	ldd	r25, Y+34	; 0x22
    1c9a:	01 97       	sbiw	r24, 0x01	; 1
    1c9c:	9a a3       	std	Y+34, r25	; 0x22
    1c9e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca0:	89 a1       	ldd	r24, Y+33	; 0x21
    1ca2:	9a a1       	ldd	r25, Y+34	; 0x22
    1ca4:	00 97       	sbiw	r24, 0x00	; 0
    1ca6:	69 f7       	brne	.-38     	; 0x1c82 <Lcd_vInitialization+0x1ae>
    1ca8:	14 c0       	rjmp	.+40     	; 0x1cd2 <Lcd_vInitialization+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1caa:	6b a1       	ldd	r22, Y+35	; 0x23
    1cac:	7c a1       	ldd	r23, Y+36	; 0x24
    1cae:	8d a1       	ldd	r24, Y+37	; 0x25
    1cb0:	9e a1       	ldd	r25, Y+38	; 0x26
    1cb2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	cb 01       	movw	r24, r22
    1cba:	9a a3       	std	Y+34, r25	; 0x22
    1cbc:	89 a3       	std	Y+33, r24	; 0x21
    1cbe:	89 a1       	ldd	r24, Y+33	; 0x21
    1cc0:	9a a1       	ldd	r25, Y+34	; 0x22
    1cc2:	9e 8f       	std	Y+30, r25	; 0x1e
    1cc4:	8d 8f       	std	Y+29, r24	; 0x1d
    1cc6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cc8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1cca:	01 97       	sbiw	r24, 0x01	; 1
    1ccc:	f1 f7       	brne	.-4      	; 0x1cca <Lcd_vInitialization+0x1f6>
    1cce:	9e 8f       	std	Y+30, r25	; 0x1e
    1cd0:	8d 8f       	std	Y+29, r24	; 0x1d
	 _delay_ms(2);
	 LCD_vWriteCommand(0b00001111);
    1cd2:	8f e0       	ldi	r24, 0x0F	; 15
    1cd4:	0e 94 cc 0c 	call	0x1998	; 0x1998 <LCD_vWriteCommand>
    1cd8:	80 e0       	ldi	r24, 0x00	; 0
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	a0 e0       	ldi	r26, 0x00	; 0
    1cde:	b0 e4       	ldi	r27, 0x40	; 64
    1ce0:	89 8f       	std	Y+25, r24	; 0x19
    1ce2:	9a 8f       	std	Y+26, r25	; 0x1a
    1ce4:	ab 8f       	std	Y+27, r26	; 0x1b
    1ce6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ce8:	69 8d       	ldd	r22, Y+25	; 0x19
    1cea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	4a e7       	ldi	r20, 0x7A	; 122
    1cf6:	53 e4       	ldi	r21, 0x43	; 67
    1cf8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	8d 8b       	std	Y+21, r24	; 0x15
    1d02:	9e 8b       	std	Y+22, r25	; 0x16
    1d04:	af 8b       	std	Y+23, r26	; 0x17
    1d06:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d08:	6d 89       	ldd	r22, Y+21	; 0x15
    1d0a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d0c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d0e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	40 e8       	ldi	r20, 0x80	; 128
    1d16:	5f e3       	ldi	r21, 0x3F	; 63
    1d18:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d1c:	88 23       	and	r24, r24
    1d1e:	2c f4       	brge	.+10     	; 0x1d2a <Lcd_vInitialization+0x256>
		__ticks = 1;
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	9c 8b       	std	Y+20, r25	; 0x14
    1d26:	8b 8b       	std	Y+19, r24	; 0x13
    1d28:	3f c0       	rjmp	.+126    	; 0x1da8 <Lcd_vInitialization+0x2d4>
	else if (__tmp > 65535)
    1d2a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d2c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d2e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d30:	98 8d       	ldd	r25, Y+24	; 0x18
    1d32:	20 e0       	ldi	r18, 0x00	; 0
    1d34:	3f ef       	ldi	r19, 0xFF	; 255
    1d36:	4f e7       	ldi	r20, 0x7F	; 127
    1d38:	57 e4       	ldi	r21, 0x47	; 71
    1d3a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d3e:	18 16       	cp	r1, r24
    1d40:	4c f5       	brge	.+82     	; 0x1d94 <Lcd_vInitialization+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d42:	69 8d       	ldd	r22, Y+25	; 0x19
    1d44:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d46:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d48:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d4a:	20 e0       	ldi	r18, 0x00	; 0
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	40 e2       	ldi	r20, 0x20	; 32
    1d50:	51 e4       	ldi	r21, 0x41	; 65
    1d52:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d56:	dc 01       	movw	r26, r24
    1d58:	cb 01       	movw	r24, r22
    1d5a:	bc 01       	movw	r22, r24
    1d5c:	cd 01       	movw	r24, r26
    1d5e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d62:	dc 01       	movw	r26, r24
    1d64:	cb 01       	movw	r24, r22
    1d66:	9c 8b       	std	Y+20, r25	; 0x14
    1d68:	8b 8b       	std	Y+19, r24	; 0x13
    1d6a:	0f c0       	rjmp	.+30     	; 0x1d8a <Lcd_vInitialization+0x2b6>
    1d6c:	89 e1       	ldi	r24, 0x19	; 25
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	9a 8b       	std	Y+18, r25	; 0x12
    1d72:	89 8b       	std	Y+17, r24	; 0x11
    1d74:	89 89       	ldd	r24, Y+17	; 0x11
    1d76:	9a 89       	ldd	r25, Y+18	; 0x12
    1d78:	01 97       	sbiw	r24, 0x01	; 1
    1d7a:	f1 f7       	brne	.-4      	; 0x1d78 <Lcd_vInitialization+0x2a4>
    1d7c:	9a 8b       	std	Y+18, r25	; 0x12
    1d7e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d80:	8b 89       	ldd	r24, Y+19	; 0x13
    1d82:	9c 89       	ldd	r25, Y+20	; 0x14
    1d84:	01 97       	sbiw	r24, 0x01	; 1
    1d86:	9c 8b       	std	Y+20, r25	; 0x14
    1d88:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d8a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d8c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d8e:	00 97       	sbiw	r24, 0x00	; 0
    1d90:	69 f7       	brne	.-38     	; 0x1d6c <Lcd_vInitialization+0x298>
    1d92:	14 c0       	rjmp	.+40     	; 0x1dbc <Lcd_vInitialization+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d94:	6d 89       	ldd	r22, Y+21	; 0x15
    1d96:	7e 89       	ldd	r23, Y+22	; 0x16
    1d98:	8f 89       	ldd	r24, Y+23	; 0x17
    1d9a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d9c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1da0:	dc 01       	movw	r26, r24
    1da2:	cb 01       	movw	r24, r22
    1da4:	9c 8b       	std	Y+20, r25	; 0x14
    1da6:	8b 8b       	std	Y+19, r24	; 0x13
    1da8:	8b 89       	ldd	r24, Y+19	; 0x13
    1daa:	9c 89       	ldd	r25, Y+20	; 0x14
    1dac:	98 8b       	std	Y+16, r25	; 0x10
    1dae:	8f 87       	std	Y+15, r24	; 0x0f
    1db0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1db2:	98 89       	ldd	r25, Y+16	; 0x10
    1db4:	01 97       	sbiw	r24, 0x01	; 1
    1db6:	f1 f7       	brne	.-4      	; 0x1db4 <Lcd_vInitialization+0x2e0>
    1db8:	98 8b       	std	Y+16, r25	; 0x10
    1dba:	8f 87       	std	Y+15, r24	; 0x0f
	 _delay_ms(2);
	 LCD_vWriteCommand(0b00000001);
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	0e 94 cc 0c 	call	0x1998	; 0x1998 <LCD_vWriteCommand>
    1dc2:	80 e0       	ldi	r24, 0x00	; 0
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	a0 e0       	ldi	r26, 0x00	; 0
    1dc8:	b0 e4       	ldi	r27, 0x40	; 64
    1dca:	8b 87       	std	Y+11, r24	; 0x0b
    1dcc:	9c 87       	std	Y+12, r25	; 0x0c
    1dce:	ad 87       	std	Y+13, r26	; 0x0d
    1dd0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	4a e7       	ldi	r20, 0x7A	; 122
    1de0:	53 e4       	ldi	r21, 0x43	; 67
    1de2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1de6:	dc 01       	movw	r26, r24
    1de8:	cb 01       	movw	r24, r22
    1dea:	8f 83       	std	Y+7, r24	; 0x07
    1dec:	98 87       	std	Y+8, r25	; 0x08
    1dee:	a9 87       	std	Y+9, r26	; 0x09
    1df0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1df2:	6f 81       	ldd	r22, Y+7	; 0x07
    1df4:	78 85       	ldd	r23, Y+8	; 0x08
    1df6:	89 85       	ldd	r24, Y+9	; 0x09
    1df8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dfa:	20 e0       	ldi	r18, 0x00	; 0
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	40 e8       	ldi	r20, 0x80	; 128
    1e00:	5f e3       	ldi	r21, 0x3F	; 63
    1e02:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e06:	88 23       	and	r24, r24
    1e08:	2c f4       	brge	.+10     	; 0x1e14 <Lcd_vInitialization+0x340>
		__ticks = 1;
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	9e 83       	std	Y+6, r25	; 0x06
    1e10:	8d 83       	std	Y+5, r24	; 0x05
    1e12:	3f c0       	rjmp	.+126    	; 0x1e92 <Lcd_vInitialization+0x3be>
	else if (__tmp > 65535)
    1e14:	6f 81       	ldd	r22, Y+7	; 0x07
    1e16:	78 85       	ldd	r23, Y+8	; 0x08
    1e18:	89 85       	ldd	r24, Y+9	; 0x09
    1e1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e1c:	20 e0       	ldi	r18, 0x00	; 0
    1e1e:	3f ef       	ldi	r19, 0xFF	; 255
    1e20:	4f e7       	ldi	r20, 0x7F	; 127
    1e22:	57 e4       	ldi	r21, 0x47	; 71
    1e24:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e28:	18 16       	cp	r1, r24
    1e2a:	4c f5       	brge	.+82     	; 0x1e7e <Lcd_vInitialization+0x3aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e30:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e32:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e34:	20 e0       	ldi	r18, 0x00	; 0
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	40 e2       	ldi	r20, 0x20	; 32
    1e3a:	51 e4       	ldi	r21, 0x41	; 65
    1e3c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e40:	dc 01       	movw	r26, r24
    1e42:	cb 01       	movw	r24, r22
    1e44:	bc 01       	movw	r22, r24
    1e46:	cd 01       	movw	r24, r26
    1e48:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	cb 01       	movw	r24, r22
    1e50:	9e 83       	std	Y+6, r25	; 0x06
    1e52:	8d 83       	std	Y+5, r24	; 0x05
    1e54:	0f c0       	rjmp	.+30     	; 0x1e74 <Lcd_vInitialization+0x3a0>
    1e56:	89 e1       	ldi	r24, 0x19	; 25
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	9c 83       	std	Y+4, r25	; 0x04
    1e5c:	8b 83       	std	Y+3, r24	; 0x03
    1e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e60:	9c 81       	ldd	r25, Y+4	; 0x04
    1e62:	01 97       	sbiw	r24, 0x01	; 1
    1e64:	f1 f7       	brne	.-4      	; 0x1e62 <Lcd_vInitialization+0x38e>
    1e66:	9c 83       	std	Y+4, r25	; 0x04
    1e68:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e6e:	01 97       	sbiw	r24, 0x01	; 1
    1e70:	9e 83       	std	Y+6, r25	; 0x06
    1e72:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e74:	8d 81       	ldd	r24, Y+5	; 0x05
    1e76:	9e 81       	ldd	r25, Y+6	; 0x06
    1e78:	00 97       	sbiw	r24, 0x00	; 0
    1e7a:	69 f7       	brne	.-38     	; 0x1e56 <Lcd_vInitialization+0x382>
    1e7c:	14 c0       	rjmp	.+40     	; 0x1ea6 <Lcd_vInitialization+0x3d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e80:	78 85       	ldd	r23, Y+8	; 0x08
    1e82:	89 85       	ldd	r24, Y+9	; 0x09
    1e84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e86:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e8a:	dc 01       	movw	r26, r24
    1e8c:	cb 01       	movw	r24, r22
    1e8e:	9e 83       	std	Y+6, r25	; 0x06
    1e90:	8d 83       	std	Y+5, r24	; 0x05
    1e92:	8d 81       	ldd	r24, Y+5	; 0x05
    1e94:	9e 81       	ldd	r25, Y+6	; 0x06
    1e96:	9a 83       	std	Y+2, r25	; 0x02
    1e98:	89 83       	std	Y+1, r24	; 0x01
    1e9a:	89 81       	ldd	r24, Y+1	; 0x01
    1e9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e9e:	01 97       	sbiw	r24, 0x01	; 1
    1ea0:	f1 f7       	brne	.-4      	; 0x1e9e <Lcd_vInitialization+0x3ca>
    1ea2:	9a 83       	std	Y+2, r25	; 0x02
    1ea4:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(2);



}
    1ea6:	e8 96       	adiw	r28, 0x38	; 56
    1ea8:	0f b6       	in	r0, 0x3f	; 63
    1eaa:	f8 94       	cli
    1eac:	de bf       	out	0x3e, r29	; 62
    1eae:	0f be       	out	0x3f, r0	; 63
    1eb0:	cd bf       	out	0x3d, r28	; 61
    1eb2:	cf 91       	pop	r28
    1eb4:	df 91       	pop	r29
    1eb6:	08 95       	ret

00001eb8 <LCD_vWriteDataSting>:
void LCD_vWriteDataSting(u8 Data,u8 * ptr){
    1eb8:	df 93       	push	r29
    1eba:	cf 93       	push	r28
    1ebc:	cd b7       	in	r28, 0x3d	; 61
    1ebe:	de b7       	in	r29, 0x3e	; 62
    1ec0:	62 97       	sbiw	r28, 0x12	; 18
    1ec2:	0f b6       	in	r0, 0x3f	; 63
    1ec4:	f8 94       	cli
    1ec6:	de bf       	out	0x3e, r29	; 62
    1ec8:	0f be       	out	0x3f, r0	; 63
    1eca:	cd bf       	out	0x3d, r28	; 61
    1ecc:	88 8b       	std	Y+16, r24	; 0x10
    1ece:	7a 8b       	std	Y+18, r23	; 0x12
    1ed0:	69 8b       	std	Y+17, r22	; 0x11
	u8 counter;

	// RS -> 1
    DIO_vSetPinValue(LCD_CONTROL_PORT , LCD_RS , DIO_HIGH);
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	63 e0       	ldi	r22, 0x03	; 3
    1ed6:	41 e0       	ldi	r20, 0x01	; 1
    1ed8:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <DIO_vSetPinValue>
    //RW -> 0
    DIO_vSetPinValue(LCD_CONTROL_PORT , LCD_RW , DIO_LOW);
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	64 e0       	ldi	r22, 0x04	; 4
    1ee0:	40 e0       	ldi	r20, 0x00	; 0
    1ee2:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <DIO_vSetPinValue>
    // Write  data
	for(counter = 0 ; counter < Data ; counter ++){
    1ee6:	1f 86       	std	Y+15, r1	; 0x0f
    1ee8:	97 c0       	rjmp	.+302    	; 0x2018 <LCD_vWriteDataSting+0x160>
		if(ptr[counter] == '\0'){break;}
    1eea:	8f 85       	ldd	r24, Y+15	; 0x0f
    1eec:	28 2f       	mov	r18, r24
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	89 89       	ldd	r24, Y+17	; 0x11
    1ef2:	9a 89       	ldd	r25, Y+18	; 0x12
    1ef4:	fc 01       	movw	r30, r24
    1ef6:	e2 0f       	add	r30, r18
    1ef8:	f3 1f       	adc	r31, r19
    1efa:	80 81       	ld	r24, Z
    1efc:	88 23       	and	r24, r24
    1efe:	09 f4       	brne	.+2      	; 0x1f02 <LCD_vWriteDataSting+0x4a>
    1f00:	90 c0       	rjmp	.+288    	; 0x2022 <LCD_vWriteDataSting+0x16a>
		PORTC = ptr[counter];
    1f02:	a5 e3       	ldi	r26, 0x35	; 53
    1f04:	b0 e0       	ldi	r27, 0x00	; 0
    1f06:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f08:	28 2f       	mov	r18, r24
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	89 89       	ldd	r24, Y+17	; 0x11
    1f0e:	9a 89       	ldd	r25, Y+18	; 0x12
    1f10:	fc 01       	movw	r30, r24
    1f12:	e2 0f       	add	r30, r18
    1f14:	f3 1f       	adc	r31, r19
    1f16:	80 81       	ld	r24, Z
    1f18:	8c 93       	st	X, r24
	    DIO_vSetPinValue(LCD_CONTROL_PORT , LCD_ENABLE , DIO_HIGH);
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	65 e0       	ldi	r22, 0x05	; 5
    1f1e:	41 e0       	ldi	r20, 0x01	; 1
    1f20:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <DIO_vSetPinValue>
    1f24:	80 e0       	ldi	r24, 0x00	; 0
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	a0 e2       	ldi	r26, 0x20	; 32
    1f2a:	b1 e4       	ldi	r27, 0x41	; 65
    1f2c:	8b 87       	std	Y+11, r24	; 0x0b
    1f2e:	9c 87       	std	Y+12, r25	; 0x0c
    1f30:	ad 87       	std	Y+13, r26	; 0x0d
    1f32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f34:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f36:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f38:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f3c:	20 e0       	ldi	r18, 0x00	; 0
    1f3e:	30 e0       	ldi	r19, 0x00	; 0
    1f40:	4a e7       	ldi	r20, 0x7A	; 122
    1f42:	53 e4       	ldi	r21, 0x43	; 67
    1f44:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f48:	dc 01       	movw	r26, r24
    1f4a:	cb 01       	movw	r24, r22
    1f4c:	8f 83       	std	Y+7, r24	; 0x07
    1f4e:	98 87       	std	Y+8, r25	; 0x08
    1f50:	a9 87       	std	Y+9, r26	; 0x09
    1f52:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f54:	6f 81       	ldd	r22, Y+7	; 0x07
    1f56:	78 85       	ldd	r23, Y+8	; 0x08
    1f58:	89 85       	ldd	r24, Y+9	; 0x09
    1f5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	40 e8       	ldi	r20, 0x80	; 128
    1f62:	5f e3       	ldi	r21, 0x3F	; 63
    1f64:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f68:	88 23       	and	r24, r24
    1f6a:	2c f4       	brge	.+10     	; 0x1f76 <LCD_vWriteDataSting+0xbe>
		__ticks = 1;
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	9e 83       	std	Y+6, r25	; 0x06
    1f72:	8d 83       	std	Y+5, r24	; 0x05
    1f74:	3f c0       	rjmp	.+126    	; 0x1ff4 <LCD_vWriteDataSting+0x13c>
	else if (__tmp > 65535)
    1f76:	6f 81       	ldd	r22, Y+7	; 0x07
    1f78:	78 85       	ldd	r23, Y+8	; 0x08
    1f7a:	89 85       	ldd	r24, Y+9	; 0x09
    1f7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f7e:	20 e0       	ldi	r18, 0x00	; 0
    1f80:	3f ef       	ldi	r19, 0xFF	; 255
    1f82:	4f e7       	ldi	r20, 0x7F	; 127
    1f84:	57 e4       	ldi	r21, 0x47	; 71
    1f86:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f8a:	18 16       	cp	r1, r24
    1f8c:	4c f5       	brge	.+82     	; 0x1fe0 <LCD_vWriteDataSting+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f90:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f96:	20 e0       	ldi	r18, 0x00	; 0
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	40 e2       	ldi	r20, 0x20	; 32
    1f9c:	51 e4       	ldi	r21, 0x41	; 65
    1f9e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fa2:	dc 01       	movw	r26, r24
    1fa4:	cb 01       	movw	r24, r22
    1fa6:	bc 01       	movw	r22, r24
    1fa8:	cd 01       	movw	r24, r26
    1faa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fae:	dc 01       	movw	r26, r24
    1fb0:	cb 01       	movw	r24, r22
    1fb2:	9e 83       	std	Y+6, r25	; 0x06
    1fb4:	8d 83       	std	Y+5, r24	; 0x05
    1fb6:	0f c0       	rjmp	.+30     	; 0x1fd6 <LCD_vWriteDataSting+0x11e>
    1fb8:	89 e1       	ldi	r24, 0x19	; 25
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	9c 83       	std	Y+4, r25	; 0x04
    1fbe:	8b 83       	std	Y+3, r24	; 0x03
    1fc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc4:	01 97       	sbiw	r24, 0x01	; 1
    1fc6:	f1 f7       	brne	.-4      	; 0x1fc4 <LCD_vWriteDataSting+0x10c>
    1fc8:	9c 83       	std	Y+4, r25	; 0x04
    1fca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1fce:	9e 81       	ldd	r25, Y+6	; 0x06
    1fd0:	01 97       	sbiw	r24, 0x01	; 1
    1fd2:	9e 83       	std	Y+6, r25	; 0x06
    1fd4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fda:	00 97       	sbiw	r24, 0x00	; 0
    1fdc:	69 f7       	brne	.-38     	; 0x1fb8 <LCD_vWriteDataSting+0x100>
    1fde:	14 c0       	rjmp	.+40     	; 0x2008 <LCD_vWriteDataSting+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fe0:	6f 81       	ldd	r22, Y+7	; 0x07
    1fe2:	78 85       	ldd	r23, Y+8	; 0x08
    1fe4:	89 85       	ldd	r24, Y+9	; 0x09
    1fe6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fe8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fec:	dc 01       	movw	r26, r24
    1fee:	cb 01       	movw	r24, r22
    1ff0:	9e 83       	std	Y+6, r25	; 0x06
    1ff2:	8d 83       	std	Y+5, r24	; 0x05
    1ff4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff8:	9a 83       	std	Y+2, r25	; 0x02
    1ffa:	89 83       	std	Y+1, r24	; 0x01
    1ffc:	89 81       	ldd	r24, Y+1	; 0x01
    1ffe:	9a 81       	ldd	r25, Y+2	; 0x02
    2000:	01 97       	sbiw	r24, 0x01	; 1
    2002:	f1 f7       	brne	.-4      	; 0x2000 <LCD_vWriteDataSting+0x148>
    2004:	9a 83       	std	Y+2, r25	; 0x02
    2006:	89 83       	std	Y+1, r24	; 0x01

	    _delay_ms(10);

	    //E -> 1

	    DIO_vSetPinValue(LCD_CONTROL_PORT , LCD_ENABLE , DIO_LOW);
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	65 e0       	ldi	r22, 0x05	; 5
    200c:	40 e0       	ldi	r20, 0x00	; 0
    200e:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <DIO_vSetPinValue>
	// RS -> 1
    DIO_vSetPinValue(LCD_CONTROL_PORT , LCD_RS , DIO_HIGH);
    //RW -> 0
    DIO_vSetPinValue(LCD_CONTROL_PORT , LCD_RW , DIO_LOW);
    // Write  data
	for(counter = 0 ; counter < Data ; counter ++){
    2012:	8f 85       	ldd	r24, Y+15	; 0x0f
    2014:	8f 5f       	subi	r24, 0xFF	; 255
    2016:	8f 87       	std	Y+15, r24	; 0x0f
    2018:	9f 85       	ldd	r25, Y+15	; 0x0f
    201a:	88 89       	ldd	r24, Y+16	; 0x10
    201c:	98 17       	cp	r25, r24
    201e:	08 f4       	brcc	.+2      	; 0x2022 <LCD_vWriteDataSting+0x16a>
    2020:	64 cf       	rjmp	.-312    	; 0x1eea <LCD_vWriteDataSting+0x32>


	}


}
    2022:	62 96       	adiw	r28, 0x12	; 18
    2024:	0f b6       	in	r0, 0x3f	; 63
    2026:	f8 94       	cli
    2028:	de bf       	out	0x3e, r29	; 62
    202a:	0f be       	out	0x3f, r0	; 63
    202c:	cd bf       	out	0x3d, r28	; 61
    202e:	cf 91       	pop	r28
    2030:	df 91       	pop	r29
    2032:	08 95       	ret

00002034 <main>:
#include "Bit_modification.h"
u8 A[11]="Temp: \0";
u8 B[11]="Light: \0";
u8 C[11]="3-Back \0";

 int main(){
    2034:	df 93       	push	r29
    2036:	cf 93       	push	r28
    2038:	cd b7       	in	r28, 0x3d	; 61
    203a:	de b7       	in	r29, 0x3e	; 62
    203c:	2e 97       	sbiw	r28, 0x0e	; 14
    203e:	0f b6       	in	r0, 0x3f	; 63
    2040:	f8 94       	cli
    2042:	de bf       	out	0x3e, r29	; 62
    2044:	0f be       	out	0x3f, r0	; 63
    2046:	cd bf       	out	0x3d, r28	; 61
	    ADC_initioalized();
    2048:	0e 94 63 06 	call	0xcc6	; 0xcc6 <ADC_initioalized>
		Lcd_vInitialization();
    204c:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <Lcd_vInitialization>

		Set_bits(SREG,SREG_I); // enable global interrupt
    2050:	af e5       	ldi	r26, 0x5F	; 95
    2052:	b0 e0       	ldi	r27, 0x00	; 0
    2054:	ef e5       	ldi	r30, 0x5F	; 95
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	80 81       	ld	r24, Z
    205a:	80 68       	ori	r24, 0x80	; 128
    205c:	8c 93       	st	X, r24
		Set_bits(GICR,INT0); // enable int0 interrupt
    205e:	ab e5       	ldi	r26, 0x5B	; 91
    2060:	b0 e0       	ldi	r27, 0x00	; 0
    2062:	eb e5       	ldi	r30, 0x5B	; 91
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	80 81       	ld	r24, Z
    2068:	80 64       	ori	r24, 0x40	; 64
    206a:	8c 93       	st	X, r24
		Set_bits(GICR,INT1); // enable int1 interrupt
    206c:	ab e5       	ldi	r26, 0x5B	; 91
    206e:	b0 e0       	ldi	r27, 0x00	; 0
    2070:	eb e5       	ldi	r30, 0x5B	; 91
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	80 81       	ld	r24, Z
    2076:	80 68       	ori	r24, 0x80	; 128
    2078:	8c 93       	st	X, r24
		Set_bits(GICR,INT2); // enable int2 interrupt
    207a:	ab e5       	ldi	r26, 0x5B	; 91
    207c:	b0 e0       	ldi	r27, 0x00	; 0
    207e:	eb e5       	ldi	r30, 0x5B	; 91
    2080:	f0 e0       	ldi	r31, 0x00	; 0
    2082:	80 81       	ld	r24, Z
    2084:	80 62       	ori	r24, 0x20	; 32
    2086:	8c 93       	st	X, r24

		Set_bits(MCUCR,ISC00); // select rising edge mode of int0
    2088:	a5 e5       	ldi	r26, 0x55	; 85
    208a:	b0 e0       	ldi	r27, 0x00	; 0
    208c:	e5 e5       	ldi	r30, 0x55	; 85
    208e:	f0 e0       	ldi	r31, 0x00	; 0
    2090:	80 81       	ld	r24, Z
    2092:	81 60       	ori	r24, 0x01	; 1
    2094:	8c 93       	st	X, r24
		Set_bits(MCUCR,ISC01); // select rising edge mode of int0
    2096:	a5 e5       	ldi	r26, 0x55	; 85
    2098:	b0 e0       	ldi	r27, 0x00	; 0
    209a:	e5 e5       	ldi	r30, 0x55	; 85
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	80 81       	ld	r24, Z
    20a0:	82 60       	ori	r24, 0x02	; 2
    20a2:	8c 93       	st	X, r24
		Set_bits(MCUCR,ISC10); // select rising edge mode of int1
    20a4:	a5 e5       	ldi	r26, 0x55	; 85
    20a6:	b0 e0       	ldi	r27, 0x00	; 0
    20a8:	e5 e5       	ldi	r30, 0x55	; 85
    20aa:	f0 e0       	ldi	r31, 0x00	; 0
    20ac:	80 81       	ld	r24, Z
    20ae:	84 60       	ori	r24, 0x04	; 4
    20b0:	8c 93       	st	X, r24
		Set_bits(MCUCR,ISC11); // select rising edge mode of int1
    20b2:	a5 e5       	ldi	r26, 0x55	; 85
    20b4:	b0 e0       	ldi	r27, 0x00	; 0
    20b6:	e5 e5       	ldi	r30, 0x55	; 85
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	80 81       	ld	r24, Z
    20bc:	88 60       	ori	r24, 0x08	; 8
    20be:	8c 93       	st	X, r24
		Set_bits(MCUCSR,ISC2); // select rising edge mode of int2
    20c0:	a4 e5       	ldi	r26, 0x54	; 84
    20c2:	b0 e0       	ldi	r27, 0x00	; 0
    20c4:	e4 e5       	ldi	r30, 0x54	; 84
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	80 81       	ld	r24, Z
    20ca:	80 64       	ori	r24, 0x40	; 64
    20cc:	8c 93       	st	X, r24
	 // pull up resistor and costomize the work !
	    Set_bits(SREG,7);// global enable
    20ce:	af e5       	ldi	r26, 0x5F	; 95
    20d0:	b0 e0       	ldi	r27, 0x00	; 0
    20d2:	ef e5       	ldi	r30, 0x5F	; 95
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	80 81       	ld	r24, Z
    20d8:	80 68       	ori	r24, 0x80	; 128
    20da:	8c 93       	st	X, r24
	 	DDRD=0x00;      //ddrd intrupt input
    20dc:	e1 e3       	ldi	r30, 0x31	; 49
    20de:	f0 e0       	ldi	r31, 0x00	; 0
    20e0:	10 82       	st	Z, r1

	 	 Set_bits(PORTB,2);
    20e2:	a8 e3       	ldi	r26, 0x38	; 56
    20e4:	b0 e0       	ldi	r27, 0x00	; 0
    20e6:	e8 e3       	ldi	r30, 0x38	; 56
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	80 81       	ld	r24, Z
    20ec:	84 60       	ori	r24, 0x04	; 4
    20ee:	8c 93       	st	X, r24
	 	 Set_bits(PORTD,2);
    20f0:	a2 e3       	ldi	r26, 0x32	; 50
    20f2:	b0 e0       	ldi	r27, 0x00	; 0
    20f4:	e2 e3       	ldi	r30, 0x32	; 50
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	80 81       	ld	r24, Z
    20fa:	84 60       	ori	r24, 0x04	; 4
    20fc:	8c 93       	st	X, r24
	 	 Set_bits(PORTD,3);
    20fe:	a2 e3       	ldi	r26, 0x32	; 50
    2100:	b0 e0       	ldi	r27, 0x00	; 0
    2102:	e2 e3       	ldi	r30, 0x32	; 50
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	80 81       	ld	r24, Z
    2108:	88 60       	ori	r24, 0x08	; 8
    210a:	8c 93       	st	X, r24
	 	DIO_vSerPinDirection(DIO_PORTB , DIO_PIN7 , DIO_OUTPUT);
    210c:	81 e0       	ldi	r24, 0x01	; 1
    210e:	67 e0       	ldi	r22, 0x07	; 7
    2110:	41 e0       	ldi	r20, 0x01	; 1
    2112:	0e 94 06 08 	call	0x100c	; 0x100c <DIO_vSerPinDirection>

	 	LCD_vWriteDataSting(6,A);
    2116:	28 e6       	ldi	r18, 0x68	; 104
    2118:	31 e0       	ldi	r19, 0x01	; 1
    211a:	86 e0       	ldi	r24, 0x06	; 6
    211c:	b9 01       	movw	r22, r18
    211e:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <LCD_vWriteDataSting>
		 LCD_vPosition(17); // First digit in Second Line
    2122:	81 e1       	ldi	r24, 0x11	; 17
    2124:	0e 94 9c 0b 	call	0x1738	; 0x1738 <LCD_vPosition>
		 LCD_vWriteDataSting(6,B);
    2128:	23 e7       	ldi	r18, 0x73	; 115
    212a:	31 e0       	ldi	r19, 0x01	; 1
    212c:	86 e0       	ldi	r24, 0x06	; 6
    212e:	b9 01       	movw	r22, r18
    2130:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <LCD_vWriteDataSting>
    2134:	80 e0       	ldi	r24, 0x00	; 0
    2136:	90 e4       	ldi	r25, 0x40	; 64
    2138:	ac e1       	ldi	r26, 0x1C	; 28
    213a:	b6 e4       	ldi	r27, 0x46	; 70
    213c:	8b 87       	std	Y+11, r24	; 0x0b
    213e:	9c 87       	std	Y+12, r25	; 0x0c
    2140:	ad 87       	std	Y+13, r26	; 0x0d
    2142:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2144:	6b 85       	ldd	r22, Y+11	; 0x0b
    2146:	7c 85       	ldd	r23, Y+12	; 0x0c
    2148:	8d 85       	ldd	r24, Y+13	; 0x0d
    214a:	9e 85       	ldd	r25, Y+14	; 0x0e
    214c:	20 e0       	ldi	r18, 0x00	; 0
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	4a e7       	ldi	r20, 0x7A	; 122
    2152:	53 e4       	ldi	r21, 0x43	; 67
    2154:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2158:	dc 01       	movw	r26, r24
    215a:	cb 01       	movw	r24, r22
    215c:	8f 83       	std	Y+7, r24	; 0x07
    215e:	98 87       	std	Y+8, r25	; 0x08
    2160:	a9 87       	std	Y+9, r26	; 0x09
    2162:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2164:	6f 81       	ldd	r22, Y+7	; 0x07
    2166:	78 85       	ldd	r23, Y+8	; 0x08
    2168:	89 85       	ldd	r24, Y+9	; 0x09
    216a:	9a 85       	ldd	r25, Y+10	; 0x0a
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	40 e8       	ldi	r20, 0x80	; 128
    2172:	5f e3       	ldi	r21, 0x3F	; 63
    2174:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2178:	88 23       	and	r24, r24
    217a:	2c f4       	brge	.+10     	; 0x2186 <main+0x152>
		__ticks = 1;
    217c:	81 e0       	ldi	r24, 0x01	; 1
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	9e 83       	std	Y+6, r25	; 0x06
    2182:	8d 83       	std	Y+5, r24	; 0x05
    2184:	3f c0       	rjmp	.+126    	; 0x2204 <main+0x1d0>
	else if (__tmp > 65535)
    2186:	6f 81       	ldd	r22, Y+7	; 0x07
    2188:	78 85       	ldd	r23, Y+8	; 0x08
    218a:	89 85       	ldd	r24, Y+9	; 0x09
    218c:	9a 85       	ldd	r25, Y+10	; 0x0a
    218e:	20 e0       	ldi	r18, 0x00	; 0
    2190:	3f ef       	ldi	r19, 0xFF	; 255
    2192:	4f e7       	ldi	r20, 0x7F	; 127
    2194:	57 e4       	ldi	r21, 0x47	; 71
    2196:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    219a:	18 16       	cp	r1, r24
    219c:	4c f5       	brge	.+82     	; 0x21f0 <main+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    219e:	6b 85       	ldd	r22, Y+11	; 0x0b
    21a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    21a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    21a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	40 e2       	ldi	r20, 0x20	; 32
    21ac:	51 e4       	ldi	r21, 0x41	; 65
    21ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	bc 01       	movw	r22, r24
    21b8:	cd 01       	movw	r24, r26
    21ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21be:	dc 01       	movw	r26, r24
    21c0:	cb 01       	movw	r24, r22
    21c2:	9e 83       	std	Y+6, r25	; 0x06
    21c4:	8d 83       	std	Y+5, r24	; 0x05
    21c6:	0f c0       	rjmp	.+30     	; 0x21e6 <main+0x1b2>
    21c8:	89 e1       	ldi	r24, 0x19	; 25
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	9c 83       	std	Y+4, r25	; 0x04
    21ce:	8b 83       	std	Y+3, r24	; 0x03
    21d0:	8b 81       	ldd	r24, Y+3	; 0x03
    21d2:	9c 81       	ldd	r25, Y+4	; 0x04
    21d4:	01 97       	sbiw	r24, 0x01	; 1
    21d6:	f1 f7       	brne	.-4      	; 0x21d4 <main+0x1a0>
    21d8:	9c 83       	std	Y+4, r25	; 0x04
    21da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21dc:	8d 81       	ldd	r24, Y+5	; 0x05
    21de:	9e 81       	ldd	r25, Y+6	; 0x06
    21e0:	01 97       	sbiw	r24, 0x01	; 1
    21e2:	9e 83       	std	Y+6, r25	; 0x06
    21e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e6:	8d 81       	ldd	r24, Y+5	; 0x05
    21e8:	9e 81       	ldd	r25, Y+6	; 0x06
    21ea:	00 97       	sbiw	r24, 0x00	; 0
    21ec:	69 f7       	brne	.-38     	; 0x21c8 <main+0x194>
    21ee:	14 c0       	rjmp	.+40     	; 0x2218 <main+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f0:	6f 81       	ldd	r22, Y+7	; 0x07
    21f2:	78 85       	ldd	r23, Y+8	; 0x08
    21f4:	89 85       	ldd	r24, Y+9	; 0x09
    21f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21fc:	dc 01       	movw	r26, r24
    21fe:	cb 01       	movw	r24, r22
    2200:	9e 83       	std	Y+6, r25	; 0x06
    2202:	8d 83       	std	Y+5, r24	; 0x05
    2204:	8d 81       	ldd	r24, Y+5	; 0x05
    2206:	9e 81       	ldd	r25, Y+6	; 0x06
    2208:	9a 83       	std	Y+2, r25	; 0x02
    220a:	89 83       	std	Y+1, r24	; 0x01
    220c:	89 81       	ldd	r24, Y+1	; 0x01
    220e:	9a 81       	ldd	r25, Y+2	; 0x02
    2210:	01 97       	sbiw	r24, 0x01	; 1
    2212:	f1 f7       	brne	.-4      	; 0x2210 <main+0x1dc>
    2214:	9a 83       	std	Y+2, r25	; 0x02
    2216:	89 83       	std	Y+1, r24	; 0x01
		 _delay_ms(10000);
		 while(1){
		 if(ADC_read(1) > 1500){
    2218:	81 e0       	ldi	r24, 0x01	; 1
    221a:	0e 94 a9 06 	call	0xd52	; 0xd52 <ADC_read>
    221e:	25 e0       	ldi	r18, 0x05	; 5
    2220:	8d 3d       	cpi	r24, 0xDD	; 221
    2222:	92 07       	cpc	r25, r18
    2224:	30 f0       	brcs	.+12     	; 0x2232 <main+0x1fe>
			  DIO_vSetPinValue(DIO_PORTB , DIO_PIN7 , DIO_HIGH);
    2226:	81 e0       	ldi	r24, 0x01	; 1
    2228:	67 e0       	ldi	r22, 0x07	; 7
    222a:	41 e0       	ldi	r20, 0x01	; 1
    222c:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <DIO_vSetPinValue>
    2230:	f3 cf       	rjmp	.-26     	; 0x2218 <main+0x1e4>
		 }
		 else{
			 DIO_vSetPinValue(DIO_PORTB , DIO_PIN7 , DIO_LOW);
    2232:	81 e0       	ldi	r24, 0x01	; 1
    2234:	67 e0       	ldi	r22, 0x07	; 7
    2236:	40 e0       	ldi	r20, 0x00	; 0
    2238:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <DIO_vSetPinValue>
    223c:	ed cf       	rjmp	.-38     	; 0x2218 <main+0x1e4>

0000223e <__vector_1>:

	 }

 }
 ISR(INT0_vect)
 {
    223e:	1f 92       	push	r1
    2240:	0f 92       	push	r0
    2242:	0f b6       	in	r0, 0x3f	; 63
    2244:	0f 92       	push	r0
    2246:	11 24       	eor	r1, r1
    2248:	2f 93       	push	r18
    224a:	3f 93       	push	r19
    224c:	4f 93       	push	r20
    224e:	5f 93       	push	r21
    2250:	6f 93       	push	r22
    2252:	7f 93       	push	r23
    2254:	8f 93       	push	r24
    2256:	9f 93       	push	r25
    2258:	af 93       	push	r26
    225a:	bf 93       	push	r27
    225c:	ef 93       	push	r30
    225e:	ff 93       	push	r31
    2260:	df 93       	push	r29
    2262:	cf 93       	push	r28
    2264:	cd b7       	in	r28, 0x3d	; 61
    2266:	de b7       	in	r29, 0x3e	; 62
    2268:	e0 97       	sbiw	r28, 0x30	; 48
    226a:	de bf       	out	0x3e, r29	; 62
    226c:	cd bf       	out	0x3d, r28	; 61
	 LCD_vWriteCommand(0b00000001);
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	0e 94 cc 0c 	call	0x1998	; 0x1998 <LCD_vWriteCommand>
	 LCD_vWriteDataSting(6,B);
    2274:	23 e7       	ldi	r18, 0x73	; 115
    2276:	31 e0       	ldi	r19, 0x01	; 1
    2278:	86 e0       	ldi	r24, 0x06	; 6
    227a:	b9 01       	movw	r22, r18
    227c:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <LCD_vWriteDataSting>
    2280:	80 e0       	ldi	r24, 0x00	; 0
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	a8 ec       	ldi	r26, 0xC8	; 200
    2286:	b2 e4       	ldi	r27, 0x42	; 66
    2288:	8b 87       	std	Y+11, r24	; 0x0b
    228a:	9c 87       	std	Y+12, r25	; 0x0c
    228c:	ad 87       	std	Y+13, r26	; 0x0d
    228e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2290:	6b 85       	ldd	r22, Y+11	; 0x0b
    2292:	7c 85       	ldd	r23, Y+12	; 0x0c
    2294:	8d 85       	ldd	r24, Y+13	; 0x0d
    2296:	9e 85       	ldd	r25, Y+14	; 0x0e
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	4a e7       	ldi	r20, 0x7A	; 122
    229e:	53 e4       	ldi	r21, 0x43	; 67
    22a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	8f 83       	std	Y+7, r24	; 0x07
    22aa:	98 87       	std	Y+8, r25	; 0x08
    22ac:	a9 87       	std	Y+9, r26	; 0x09
    22ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22b0:	6f 81       	ldd	r22, Y+7	; 0x07
    22b2:	78 85       	ldd	r23, Y+8	; 0x08
    22b4:	89 85       	ldd	r24, Y+9	; 0x09
    22b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	40 e8       	ldi	r20, 0x80	; 128
    22be:	5f e3       	ldi	r21, 0x3F	; 63
    22c0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22c4:	88 23       	and	r24, r24
    22c6:	2c f4       	brge	.+10     	; 0x22d2 <__vector_1+0x94>
		__ticks = 1;
    22c8:	81 e0       	ldi	r24, 0x01	; 1
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	9e 83       	std	Y+6, r25	; 0x06
    22ce:	8d 83       	std	Y+5, r24	; 0x05
    22d0:	3f c0       	rjmp	.+126    	; 0x2350 <__vector_1+0x112>
	else if (__tmp > 65535)
    22d2:	6f 81       	ldd	r22, Y+7	; 0x07
    22d4:	78 85       	ldd	r23, Y+8	; 0x08
    22d6:	89 85       	ldd	r24, Y+9	; 0x09
    22d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22da:	20 e0       	ldi	r18, 0x00	; 0
    22dc:	3f ef       	ldi	r19, 0xFF	; 255
    22de:	4f e7       	ldi	r20, 0x7F	; 127
    22e0:	57 e4       	ldi	r21, 0x47	; 71
    22e2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    22e6:	18 16       	cp	r1, r24
    22e8:	4c f5       	brge	.+82     	; 0x233c <__vector_1+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    22ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    22ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    22f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    22f2:	20 e0       	ldi	r18, 0x00	; 0
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	40 e2       	ldi	r20, 0x20	; 32
    22f8:	51 e4       	ldi	r21, 0x41	; 65
    22fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22fe:	dc 01       	movw	r26, r24
    2300:	cb 01       	movw	r24, r22
    2302:	bc 01       	movw	r22, r24
    2304:	cd 01       	movw	r24, r26
    2306:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    230a:	dc 01       	movw	r26, r24
    230c:	cb 01       	movw	r24, r22
    230e:	9e 83       	std	Y+6, r25	; 0x06
    2310:	8d 83       	std	Y+5, r24	; 0x05
    2312:	0f c0       	rjmp	.+30     	; 0x2332 <__vector_1+0xf4>
    2314:	89 e1       	ldi	r24, 0x19	; 25
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	9c 83       	std	Y+4, r25	; 0x04
    231a:	8b 83       	std	Y+3, r24	; 0x03
    231c:	8b 81       	ldd	r24, Y+3	; 0x03
    231e:	9c 81       	ldd	r25, Y+4	; 0x04
    2320:	01 97       	sbiw	r24, 0x01	; 1
    2322:	f1 f7       	brne	.-4      	; 0x2320 <__vector_1+0xe2>
    2324:	9c 83       	std	Y+4, r25	; 0x04
    2326:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2328:	8d 81       	ldd	r24, Y+5	; 0x05
    232a:	9e 81       	ldd	r25, Y+6	; 0x06
    232c:	01 97       	sbiw	r24, 0x01	; 1
    232e:	9e 83       	std	Y+6, r25	; 0x06
    2330:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2332:	8d 81       	ldd	r24, Y+5	; 0x05
    2334:	9e 81       	ldd	r25, Y+6	; 0x06
    2336:	00 97       	sbiw	r24, 0x00	; 0
    2338:	69 f7       	brne	.-38     	; 0x2314 <__vector_1+0xd6>
    233a:	14 c0       	rjmp	.+40     	; 0x2364 <__vector_1+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    233c:	6f 81       	ldd	r22, Y+7	; 0x07
    233e:	78 85       	ldd	r23, Y+8	; 0x08
    2340:	89 85       	ldd	r24, Y+9	; 0x09
    2342:	9a 85       	ldd	r25, Y+10	; 0x0a
    2344:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2348:	dc 01       	movw	r26, r24
    234a:	cb 01       	movw	r24, r22
    234c:	9e 83       	std	Y+6, r25	; 0x06
    234e:	8d 83       	std	Y+5, r24	; 0x05
    2350:	8d 81       	ldd	r24, Y+5	; 0x05
    2352:	9e 81       	ldd	r25, Y+6	; 0x06
    2354:	9a 83       	std	Y+2, r25	; 0x02
    2356:	89 83       	std	Y+1, r24	; 0x01
    2358:	89 81       	ldd	r24, Y+1	; 0x01
    235a:	9a 81       	ldd	r25, Y+2	; 0x02
    235c:	01 97       	sbiw	r24, 0x01	; 1
    235e:	f1 f7       	brne	.-4      	; 0x235c <__vector_1+0x11e>
    2360:	9a 83       	std	Y+2, r25	; 0x02
    2362:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(100);

	 u16 read2;
	 read2=5000/ADC_read(1);
    2364:	81 e0       	ldi	r24, 0x01	; 1
    2366:	0e 94 a9 06 	call	0xd52	; 0xd52 <ADC_read>
    236a:	9c 01       	movw	r18, r24
    236c:	88 e8       	ldi	r24, 0x88	; 136
    236e:	93 e1       	ldi	r25, 0x13	; 19
    2370:	b9 01       	movw	r22, r18
    2372:	0e 94 a7 12 	call	0x254e	; 0x254e <__udivmodhi4>
    2376:	cb 01       	movw	r24, r22
    2378:	98 8b       	std	Y+16, r25	; 0x10
    237a:	8f 87       	std	Y+15, r24	; 0x0f
	 u16 result2[16];
	 itoa(read2,result2, 10);
    237c:	8f 85       	ldd	r24, Y+15	; 0x0f
    237e:	98 89       	ldd	r25, Y+16	; 0x10
    2380:	9e 01       	movw	r18, r28
    2382:	2f 5e       	subi	r18, 0xEF	; 239
    2384:	3f 4f       	sbci	r19, 0xFF	; 255
    2386:	b9 01       	movw	r22, r18
    2388:	4a e0       	ldi	r20, 0x0A	; 10
    238a:	50 e0       	ldi	r21, 0x00	; 0
    238c:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <itoa>
	 LCD_vWriteDataSting(5,result2);
    2390:	9e 01       	movw	r18, r28
    2392:	2f 5e       	subi	r18, 0xEF	; 239
    2394:	3f 4f       	sbci	r19, 0xFF	; 255
    2396:	85 e0       	ldi	r24, 0x05	; 5
    2398:	b9 01       	movw	r22, r18
    239a:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <LCD_vWriteDataSting>
	 LCD_vPosition(17);
    239e:	81 e1       	ldi	r24, 0x11	; 17
    23a0:	0e 94 9c 0b 	call	0x1738	; 0x1738 <LCD_vPosition>

		 LCD_vWriteDataSting(6,C);
    23a4:	2e e7       	ldi	r18, 0x7E	; 126
    23a6:	31 e0       	ldi	r19, 0x01	; 1
    23a8:	86 e0       	ldi	r24, 0x06	; 6
    23aa:	b9 01       	movw	r22, r18
    23ac:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <LCD_vWriteDataSting>
	 Clear_bits(GICR,INT0);
    23b0:	ab e5       	ldi	r26, 0x5B	; 91
    23b2:	b0 e0       	ldi	r27, 0x00	; 0
    23b4:	eb e5       	ldi	r30, 0x5B	; 91
    23b6:	f0 e0       	ldi	r31, 0x00	; 0
    23b8:	80 81       	ld	r24, Z
    23ba:	8f 7b       	andi	r24, 0xBF	; 191
    23bc:	8c 93       	st	X, r24
	    Clear_bits(GICR,INT1);
    23be:	ab e5       	ldi	r26, 0x5B	; 91
    23c0:	b0 e0       	ldi	r27, 0x00	; 0
    23c2:	eb e5       	ldi	r30, 0x5B	; 91
    23c4:	f0 e0       	ldi	r31, 0x00	; 0
    23c6:	80 81       	ld	r24, Z
    23c8:	8f 77       	andi	r24, 0x7F	; 127
    23ca:	8c 93       	st	X, r24

 }
    23cc:	e0 96       	adiw	r28, 0x30	; 48
    23ce:	de bf       	out	0x3e, r29	; 62
    23d0:	cd bf       	out	0x3d, r28	; 61
    23d2:	cf 91       	pop	r28
    23d4:	df 91       	pop	r29
    23d6:	ff 91       	pop	r31
    23d8:	ef 91       	pop	r30
    23da:	bf 91       	pop	r27
    23dc:	af 91       	pop	r26
    23de:	9f 91       	pop	r25
    23e0:	8f 91       	pop	r24
    23e2:	7f 91       	pop	r23
    23e4:	6f 91       	pop	r22
    23e6:	5f 91       	pop	r21
    23e8:	4f 91       	pop	r20
    23ea:	3f 91       	pop	r19
    23ec:	2f 91       	pop	r18
    23ee:	0f 90       	pop	r0
    23f0:	0f be       	out	0x3f, r0	; 63
    23f2:	0f 90       	pop	r0
    23f4:	1f 90       	pop	r1
    23f6:	18 95       	reti

000023f8 <__vector_2>:
 ISR(INT1_vect)
 {
    23f8:	1f 92       	push	r1
    23fa:	0f 92       	push	r0
    23fc:	0f b6       	in	r0, 0x3f	; 63
    23fe:	0f 92       	push	r0
    2400:	11 24       	eor	r1, r1
    2402:	2f 93       	push	r18
    2404:	3f 93       	push	r19
    2406:	4f 93       	push	r20
    2408:	5f 93       	push	r21
    240a:	6f 93       	push	r22
    240c:	7f 93       	push	r23
    240e:	8f 93       	push	r24
    2410:	9f 93       	push	r25
    2412:	af 93       	push	r26
    2414:	bf 93       	push	r27
    2416:	ef 93       	push	r30
    2418:	ff 93       	push	r31
    241a:	df 93       	push	r29
    241c:	cf 93       	push	r28
    241e:	cd b7       	in	r28, 0x3d	; 61
    2420:	de b7       	in	r29, 0x3e	; 62
    2422:	a2 97       	sbiw	r28, 0x22	; 34
    2424:	de bf       	out	0x3e, r29	; 62
    2426:	cd bf       	out	0x3d, r28	; 61
	 LCD_vWriteCommand(0b00000001);
    2428:	81 e0       	ldi	r24, 0x01	; 1
    242a:	0e 94 cc 0c 	call	0x1998	; 0x1998 <LCD_vWriteCommand>
	 LCD_vWriteDataSting(6,A);
    242e:	28 e6       	ldi	r18, 0x68	; 104
    2430:	31 e0       	ldi	r19, 0x01	; 1
    2432:	86 e0       	ldi	r24, 0x06	; 6
    2434:	b9 01       	movw	r22, r18
    2436:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <LCD_vWriteDataSting>
 	 u16 read= 19;
    243a:	83 e1       	ldi	r24, 0x13	; 19
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	9a 83       	std	Y+2, r25	; 0x02
    2440:	89 83       	std	Y+1, r24	; 0x01
 	 u16 result[16];
 	 itoa(read,result, 10);
    2442:	89 81       	ldd	r24, Y+1	; 0x01
    2444:	9a 81       	ldd	r25, Y+2	; 0x02
    2446:	9e 01       	movw	r18, r28
    2448:	2d 5f       	subi	r18, 0xFD	; 253
    244a:	3f 4f       	sbci	r19, 0xFF	; 255
    244c:	b9 01       	movw	r22, r18
    244e:	4a e0       	ldi	r20, 0x0A	; 10
    2450:	50 e0       	ldi	r21, 0x00	; 0
    2452:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <itoa>
 	 LCD_vWriteDataSting(2,result);
    2456:	9e 01       	movw	r18, r28
    2458:	2d 5f       	subi	r18, 0xFD	; 253
    245a:	3f 4f       	sbci	r19, 0xFF	; 255
    245c:	82 e0       	ldi	r24, 0x02	; 2
    245e:	b9 01       	movw	r22, r18
    2460:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <LCD_vWriteDataSting>
	 LCD_vPosition(17);
    2464:	81 e1       	ldi	r24, 0x11	; 17
    2466:	0e 94 9c 0b 	call	0x1738	; 0x1738 <LCD_vPosition>
		 LCD_vWriteDataSting(6,C);
    246a:	2e e7       	ldi	r18, 0x7E	; 126
    246c:	31 e0       	ldi	r19, 0x01	; 1
    246e:	86 e0       	ldi	r24, 0x06	; 6
    2470:	b9 01       	movw	r22, r18
    2472:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <LCD_vWriteDataSting>
	 Clear_bits(GICR,INT0);
    2476:	ab e5       	ldi	r26, 0x5B	; 91
    2478:	b0 e0       	ldi	r27, 0x00	; 0
    247a:	eb e5       	ldi	r30, 0x5B	; 91
    247c:	f0 e0       	ldi	r31, 0x00	; 0
    247e:	80 81       	ld	r24, Z
    2480:	8f 7b       	andi	r24, 0xBF	; 191
    2482:	8c 93       	st	X, r24
	    Clear_bits(GICR,INT1);
    2484:	ab e5       	ldi	r26, 0x5B	; 91
    2486:	b0 e0       	ldi	r27, 0x00	; 0
    2488:	eb e5       	ldi	r30, 0x5B	; 91
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	80 81       	ld	r24, Z
    248e:	8f 77       	andi	r24, 0x7F	; 127
    2490:	8c 93       	st	X, r24

 }
    2492:	a2 96       	adiw	r28, 0x22	; 34
    2494:	de bf       	out	0x3e, r29	; 62
    2496:	cd bf       	out	0x3d, r28	; 61
    2498:	cf 91       	pop	r28
    249a:	df 91       	pop	r29
    249c:	ff 91       	pop	r31
    249e:	ef 91       	pop	r30
    24a0:	bf 91       	pop	r27
    24a2:	af 91       	pop	r26
    24a4:	9f 91       	pop	r25
    24a6:	8f 91       	pop	r24
    24a8:	7f 91       	pop	r23
    24aa:	6f 91       	pop	r22
    24ac:	5f 91       	pop	r21
    24ae:	4f 91       	pop	r20
    24b0:	3f 91       	pop	r19
    24b2:	2f 91       	pop	r18
    24b4:	0f 90       	pop	r0
    24b6:	0f be       	out	0x3f, r0	; 63
    24b8:	0f 90       	pop	r0
    24ba:	1f 90       	pop	r1
    24bc:	18 95       	reti

000024be <__vector_3>:
 ISR(INT2_vect)
 {
    24be:	1f 92       	push	r1
    24c0:	0f 92       	push	r0
    24c2:	0f b6       	in	r0, 0x3f	; 63
    24c4:	0f 92       	push	r0
    24c6:	11 24       	eor	r1, r1
    24c8:	2f 93       	push	r18
    24ca:	3f 93       	push	r19
    24cc:	4f 93       	push	r20
    24ce:	5f 93       	push	r21
    24d0:	6f 93       	push	r22
    24d2:	7f 93       	push	r23
    24d4:	8f 93       	push	r24
    24d6:	9f 93       	push	r25
    24d8:	af 93       	push	r26
    24da:	bf 93       	push	r27
    24dc:	ef 93       	push	r30
    24de:	ff 93       	push	r31
    24e0:	df 93       	push	r29
    24e2:	cf 93       	push	r28
    24e4:	cd b7       	in	r28, 0x3d	; 61
    24e6:	de b7       	in	r29, 0x3e	; 62
	 LCD_vWriteCommand(0b00000001);
    24e8:	81 e0       	ldi	r24, 0x01	; 1
    24ea:	0e 94 cc 0c 	call	0x1998	; 0x1998 <LCD_vWriteCommand>

	 LCD_vWriteDataSting(6,A);
    24ee:	28 e6       	ldi	r18, 0x68	; 104
    24f0:	31 e0       	ldi	r19, 0x01	; 1
    24f2:	86 e0       	ldi	r24, 0x06	; 6
    24f4:	b9 01       	movw	r22, r18
    24f6:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <LCD_vWriteDataSting>
		 LCD_vPosition(17);
    24fa:	81 e1       	ldi	r24, 0x11	; 17
    24fc:	0e 94 9c 0b 	call	0x1738	; 0x1738 <LCD_vPosition>
	 LCD_vWriteDataSting(6,B);
    2500:	23 e7       	ldi	r18, 0x73	; 115
    2502:	31 e0       	ldi	r19, 0x01	; 1
    2504:	86 e0       	ldi	r24, 0x06	; 6
    2506:	b9 01       	movw	r22, r18
    2508:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <LCD_vWriteDataSting>
	    Set_bits(GICR,INT0);//enable dio
    250c:	ab e5       	ldi	r26, 0x5B	; 91
    250e:	b0 e0       	ldi	r27, 0x00	; 0
    2510:	eb e5       	ldi	r30, 0x5B	; 91
    2512:	f0 e0       	ldi	r31, 0x00	; 0
    2514:	80 81       	ld	r24, Z
    2516:	80 64       	ori	r24, 0x40	; 64
    2518:	8c 93       	st	X, r24
	    Set_bits(GICR,INT1);//enable dio
    251a:	ab e5       	ldi	r26, 0x5B	; 91
    251c:	b0 e0       	ldi	r27, 0x00	; 0
    251e:	eb e5       	ldi	r30, 0x5B	; 91
    2520:	f0 e0       	ldi	r31, 0x00	; 0
    2522:	80 81       	ld	r24, Z
    2524:	80 68       	ori	r24, 0x80	; 128
    2526:	8c 93       	st	X, r24

 }
    2528:	cf 91       	pop	r28
    252a:	df 91       	pop	r29
    252c:	ff 91       	pop	r31
    252e:	ef 91       	pop	r30
    2530:	bf 91       	pop	r27
    2532:	af 91       	pop	r26
    2534:	9f 91       	pop	r25
    2536:	8f 91       	pop	r24
    2538:	7f 91       	pop	r23
    253a:	6f 91       	pop	r22
    253c:	5f 91       	pop	r21
    253e:	4f 91       	pop	r20
    2540:	3f 91       	pop	r19
    2542:	2f 91       	pop	r18
    2544:	0f 90       	pop	r0
    2546:	0f be       	out	0x3f, r0	; 63
    2548:	0f 90       	pop	r0
    254a:	1f 90       	pop	r1
    254c:	18 95       	reti

0000254e <__udivmodhi4>:
    254e:	aa 1b       	sub	r26, r26
    2550:	bb 1b       	sub	r27, r27
    2552:	51 e1       	ldi	r21, 0x11	; 17
    2554:	07 c0       	rjmp	.+14     	; 0x2564 <__udivmodhi4_ep>

00002556 <__udivmodhi4_loop>:
    2556:	aa 1f       	adc	r26, r26
    2558:	bb 1f       	adc	r27, r27
    255a:	a6 17       	cp	r26, r22
    255c:	b7 07       	cpc	r27, r23
    255e:	10 f0       	brcs	.+4      	; 0x2564 <__udivmodhi4_ep>
    2560:	a6 1b       	sub	r26, r22
    2562:	b7 0b       	sbc	r27, r23

00002564 <__udivmodhi4_ep>:
    2564:	88 1f       	adc	r24, r24
    2566:	99 1f       	adc	r25, r25
    2568:	5a 95       	dec	r21
    256a:	a9 f7       	brne	.-22     	; 0x2556 <__udivmodhi4_loop>
    256c:	80 95       	com	r24
    256e:	90 95       	com	r25
    2570:	bc 01       	movw	r22, r24
    2572:	cd 01       	movw	r24, r26
    2574:	08 95       	ret

00002576 <__prologue_saves__>:
    2576:	2f 92       	push	r2
    2578:	3f 92       	push	r3
    257a:	4f 92       	push	r4
    257c:	5f 92       	push	r5
    257e:	6f 92       	push	r6
    2580:	7f 92       	push	r7
    2582:	8f 92       	push	r8
    2584:	9f 92       	push	r9
    2586:	af 92       	push	r10
    2588:	bf 92       	push	r11
    258a:	cf 92       	push	r12
    258c:	df 92       	push	r13
    258e:	ef 92       	push	r14
    2590:	ff 92       	push	r15
    2592:	0f 93       	push	r16
    2594:	1f 93       	push	r17
    2596:	cf 93       	push	r28
    2598:	df 93       	push	r29
    259a:	cd b7       	in	r28, 0x3d	; 61
    259c:	de b7       	in	r29, 0x3e	; 62
    259e:	ca 1b       	sub	r28, r26
    25a0:	db 0b       	sbc	r29, r27
    25a2:	0f b6       	in	r0, 0x3f	; 63
    25a4:	f8 94       	cli
    25a6:	de bf       	out	0x3e, r29	; 62
    25a8:	0f be       	out	0x3f, r0	; 63
    25aa:	cd bf       	out	0x3d, r28	; 61
    25ac:	09 94       	ijmp

000025ae <__epilogue_restores__>:
    25ae:	2a 88       	ldd	r2, Y+18	; 0x12
    25b0:	39 88       	ldd	r3, Y+17	; 0x11
    25b2:	48 88       	ldd	r4, Y+16	; 0x10
    25b4:	5f 84       	ldd	r5, Y+15	; 0x0f
    25b6:	6e 84       	ldd	r6, Y+14	; 0x0e
    25b8:	7d 84       	ldd	r7, Y+13	; 0x0d
    25ba:	8c 84       	ldd	r8, Y+12	; 0x0c
    25bc:	9b 84       	ldd	r9, Y+11	; 0x0b
    25be:	aa 84       	ldd	r10, Y+10	; 0x0a
    25c0:	b9 84       	ldd	r11, Y+9	; 0x09
    25c2:	c8 84       	ldd	r12, Y+8	; 0x08
    25c4:	df 80       	ldd	r13, Y+7	; 0x07
    25c6:	ee 80       	ldd	r14, Y+6	; 0x06
    25c8:	fd 80       	ldd	r15, Y+5	; 0x05
    25ca:	0c 81       	ldd	r16, Y+4	; 0x04
    25cc:	1b 81       	ldd	r17, Y+3	; 0x03
    25ce:	aa 81       	ldd	r26, Y+2	; 0x02
    25d0:	b9 81       	ldd	r27, Y+1	; 0x01
    25d2:	ce 0f       	add	r28, r30
    25d4:	d1 1d       	adc	r29, r1
    25d6:	0f b6       	in	r0, 0x3f	; 63
    25d8:	f8 94       	cli
    25da:	de bf       	out	0x3e, r29	; 62
    25dc:	0f be       	out	0x3f, r0	; 63
    25de:	cd bf       	out	0x3d, r28	; 61
    25e0:	ed 01       	movw	r28, r26
    25e2:	08 95       	ret

000025e4 <itoa>:
    25e4:	fb 01       	movw	r30, r22
    25e6:	9f 01       	movw	r18, r30
    25e8:	e8 94       	clt
    25ea:	42 30       	cpi	r20, 0x02	; 2
    25ec:	c4 f0       	brlt	.+48     	; 0x261e <itoa+0x3a>
    25ee:	45 32       	cpi	r20, 0x25	; 37
    25f0:	b4 f4       	brge	.+44     	; 0x261e <itoa+0x3a>
    25f2:	4a 30       	cpi	r20, 0x0A	; 10
    25f4:	29 f4       	brne	.+10     	; 0x2600 <itoa+0x1c>
    25f6:	97 fb       	bst	r25, 7
    25f8:	1e f4       	brtc	.+6      	; 0x2600 <itoa+0x1c>
    25fa:	90 95       	com	r25
    25fc:	81 95       	neg	r24
    25fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2600:	64 2f       	mov	r22, r20
    2602:	77 27       	eor	r23, r23
    2604:	0e 94 a7 12 	call	0x254e	; 0x254e <__udivmodhi4>
    2608:	80 5d       	subi	r24, 0xD0	; 208
    260a:	8a 33       	cpi	r24, 0x3A	; 58
    260c:	0c f0       	brlt	.+2      	; 0x2610 <itoa+0x2c>
    260e:	89 5d       	subi	r24, 0xD9	; 217
    2610:	81 93       	st	Z+, r24
    2612:	cb 01       	movw	r24, r22
    2614:	00 97       	sbiw	r24, 0x00	; 0
    2616:	a1 f7       	brne	.-24     	; 0x2600 <itoa+0x1c>
    2618:	16 f4       	brtc	.+4      	; 0x261e <itoa+0x3a>
    261a:	5d e2       	ldi	r21, 0x2D	; 45
    261c:	51 93       	st	Z+, r21
    261e:	10 82       	st	Z, r1
    2620:	c9 01       	movw	r24, r18
    2622:	0c 94 13 13 	jmp	0x2626	; 0x2626 <strrev>

00002626 <strrev>:
    2626:	dc 01       	movw	r26, r24
    2628:	fc 01       	movw	r30, r24
    262a:	67 2f       	mov	r22, r23
    262c:	71 91       	ld	r23, Z+
    262e:	77 23       	and	r23, r23
    2630:	e1 f7       	brne	.-8      	; 0x262a <strrev+0x4>
    2632:	32 97       	sbiw	r30, 0x02	; 2
    2634:	04 c0       	rjmp	.+8      	; 0x263e <strrev+0x18>
    2636:	7c 91       	ld	r23, X
    2638:	6d 93       	st	X+, r22
    263a:	70 83       	st	Z, r23
    263c:	62 91       	ld	r22, -Z
    263e:	ae 17       	cp	r26, r30
    2640:	bf 07       	cpc	r27, r31
    2642:	c8 f3       	brcs	.-14     	; 0x2636 <strrev+0x10>
    2644:	08 95       	ret

00002646 <_exit>:
    2646:	f8 94       	cli

00002648 <__stop_program>:
    2648:	ff cf       	rjmp	.-2      	; 0x2648 <__stop_program>
